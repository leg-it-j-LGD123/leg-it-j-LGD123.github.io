<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown语法与外挂标签写法汇总</title>
    <url>/2022/08/09/2022-08-09-Markdown%E8%AF%AD%E6%B3%95%E4%B8%8E%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE%E5%86%99%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="1-Markdown语法自带格式"><a href="#1-Markdown语法自带格式" class="headerlink" title="1.Markdown语法自带格式"></a>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p>
</div>
<div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p>
</div>
<h2 id="1-1-代码块"><a href="#1-1-代码块" class="headerlink" title="1.1 代码块"></a>1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="1-2-多级标题"><a href="#1-2-多级标题" class="headerlink" title="1.2 多级标题"></a>1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="1-3-文字样式"><a href="#1-3-文字样式" class="headerlink" title="1.3 文字样式"></a>1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p>
<p>文字<strong>加粗</strong>演示</p>
<p>文字<em>斜体</em>演示</p>
<p>文本<code>高亮</code>演示</p>
<p>文本<del>删除</del>线演示</p>
<font size = 5>5号字</font>
<font face="黑体">黑体</font>
<font color=blue>蓝色</font>

<table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p>
</div>
<h2 id="1-4-引用"><a href="#1-4-引用" class="headerlink" title="1.4 引用"></a>1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><blockquote>
<p> Java<br>二级引用演示<br>MySQL</p>
<blockquote>
<p>外键</p>
<p>事务</p>
<p><strong>行级锁</strong>(引用内部一样可以用格式)</p>
</blockquote>
<p>….</p>
</blockquote></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="1-5-分割线"><a href="#1-5-分割线" class="headerlink" title="1.5 分割线"></a>1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><hr>
<hr></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="1-6-列表-跟空格都可以"><a href="#1-6-列表-跟空格都可以" class="headerlink" title="1.6 列表(*,+,-跟空格都可以)"></a>1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表"><a href="#1-6-1-无序列表" class="headerlink" title="1.6.1 无序列表"></a>1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ul>
<li>Java</li>
<li>Python</li>
<li>…</li>
</ul>
<ul>
<li>Java</li>
<li>Python</li>
<li>…</li>
</ul>
<ul>
<li>Java</li>
<li>Python</li>
<li>…</li>
</ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h3 id="1-6-2-有序列表"><a href="#1-6-2-有序列表" class="headerlink" title="1.6.2 有序列表"></a>1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li></li>
<li></li>
<li></li>
<li></li>
</ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="1-7-图片"><a href="#1-7-图片" class="headerlink" title="1.7 图片"></a>1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="1-8-表格"><a href="#1-8-表格" class="headerlink" title="1.8 表格"></a>1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><div class="table-container">
<table>
<thead>
<tr>
<th>项目标号</th>
<th>资金</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>100，000</td>
<td>无</td>
</tr>
<tr>
<td>2</td>
<td>200，000</td>
<td>无</td>
</tr>
<tr>
<td>3</td>
<td>300,600</td>
<td>重要</td>
</tr>
</tbody>
</table>
</div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="1-9-公式"><a href="#1-9-公式" class="headerlink" title="1.9 公式"></a>1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><script type="math/tex; mode=display">
\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.</script></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h1 id="2-Butterfly外挂标签"><a href="#2-Butterfly外挂标签" class="headerlink" title="2.Butterfly外挂标签"></a>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p>
</div>
<h2 id="2-1-行内文本样式-text"><a href="#2-1-行内文本样式-text" class="headerlink" title="2.1 行内文本样式 text"></a>2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">示例源码</button><button type="button" class="tab " data-href="分栏-3">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-3"><ol>
<li>带 <u>下划线</u> 的文本</li>
<li>带 <emp>着重号</emp> 的文本</li>
<li>带 <wavy>波浪线</wavy> 的文本</li>
<li>带 <del>删除线</del> 的文本</li>
<li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li>
<li>密码样式的文本：<psw>这里没有验证码</psw></li>
</ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-2-行内文本-span"><a href="#2-2-行内文本-span" class="headerlink" title="2.2 行内文本 span"></a>2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">配置参数</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>字体</code>: logo, code</li>
<li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li>
<li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li>
<li><code>对齐方向</code>: left, center, right</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><ul>
<li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li>
<li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li>
</ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-3-段落文本-p"><a href="#2-3-段落文本-p" class="headerlink" title="2.3 段落文本 p"></a>2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">配置参数</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>字体</code>: logo, code</li>
<li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li>
<li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li>
<li><code>对齐方向</code>: left, center, right</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><ul>
<li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li>
<li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p>
<p class='p center small'>A Wonderful Theme for Hexo</p>
</li>
</ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-4-引用note"><a href="#2-4-引用note" class="headerlink" title="2.4 引用note"></a>2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">通用配置</button><button type="button" class="tab " data-href="分栏-2">语法格式</button><button type="button" class="tab " data-href="分栏-3">参数配置</button><button type="button" class="tab " data-href="分栏-4">示例源码</button><button type="button" class="tab " data-href="分栏-5">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>class</td>
<td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td>
</tr>
<tr>
<td>no-icon</td>
<td style="text-align:center">【可选】不显示 icon</td>
</tr>
<tr>
<td>style</td>
<td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td>
</tr>
</tbody>
</table>
</div>
<p>2.外部icon</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>class</td>
<td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td>
</tr>
<tr>
<td>no-icon</td>
<td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td>
</tr>
<tr>
<td>style</td>
<td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td>
</tr>
</tbody>
</table>
</div></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>
              <div class='content'>
              <p>1.<code>simple</code>样式<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><br>2.<code>modern</code>样式<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></p><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
              </div>
            </details>



<details class="folding-tag" blue><summary> 2.外部icon </summary>
              <div class='content'>
              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
              </div>
            </details></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>
              <div class='content'>
              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>
              </div>
            </details>



<details class="folding-tag" blue><summary> 2.外部icon </summary>
              <div class='content'>
              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>
              </div>
            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-5-上标标签-tip"><a href="#2-5-上标标签-tip" class="headerlink" title="2.5 上标标签 tip"></a>2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">配置参数</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li>
<li><code>自定义图标</code>: 支持fontawesome。</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p>
</div>
<div class="tip info"><p>info</p>
</div>
<div class="tip success"><p>success</p>
</div>
<div class="tip error"><p>error</p>
</div>
<div class="tip warning"><p>warning</p>
</div>
<div class="tip bolt"><p>bolt</p>
</div>
<div class="tip ban"><p>ban</p>
</div>
<div class="tip home"><p>home</p>
</div>
<div class="tip sync"><p>sync</p>
</div>
<div class="tip cogs"><p>cogs</p>
</div>
<div class="tip key"><p>key</p>
</div>
<div class="tip bell"><p>bell</p>
</div>
<div class="tip fa-atom"><p>自定义font awesome图标</p>
</div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-6-动态标签-anima"><a href="#2-6-动态标签-anima" class="headerlink" title="2.6 动态标签 anima"></a>2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">配置参数</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol>
<li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li>
<li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li>
<li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li>
</ol>
</div></div><div class="tab-item-content" id="分栏-3"><p>   1.On DOM load（当页面加载时显示动画）</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>
<p>2.调整动画速度<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><br>3.On hover（当鼠标悬停时显示动画）<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><br>4.On parent hover（当鼠标悬停在父级元素时显示动画）<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></p></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p>
<div class="tip warning faa-horizontal animated"><p>warning</p>
</div>
<div class="tip ban faa-flash animated"><p>ban</p>
</div>
2.调整动画速度
<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p>
</div>
<div class="tip ban faa-flash animated faa-slow"><p>ban</p>
</div>
3.On hover（当鼠标悬停时显示动画）
<div class="tip warning faa-horizontal animated-hover"><p>warning</p>
</div>
<div class="tip ban faa-flash animated-hover"><p>ban</p>
</div>
4.On parent hover（当鼠标悬停在父级元素时显示动画）
<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div>
<div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-7-复选列表-checkbox"><a href="#2-7-复选列表-checkbox" class="headerlink" title="2.7 复选列表 checkbox"></a>2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">配置参数</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>样式</code>: plus, minus, times</li>
<li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li>
<li><code>选中状态</code>: checked</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />
            <p>纯文本测试</p>
            </div>
<div class='checkbox checked'><input type="checkbox" checked="checked"/>
            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>
            </div>
<div class='checkbox red'><input type="checkbox" />
            <p>支持自定义颜色</p>
            </div>
<div class='checkbox green checked'><input type="checkbox" checked="checked"/>
            <p>绿色 + 默认选中</p>
            </div>
<div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>
            <p>黄色 + 默认选中</p>
            </div>
<div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>
            <p>青色 + 默认选中</p>
            </div>
<div class='checkbox blue checked'><input type="checkbox" checked="checked"/>
            <p>蓝色 + 默认选中</p>
            </div>
<div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>
            <p>增加</p>
            </div>
<div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>
            <p>减少</p>
            </div>
<div class='checkbox times red checked'><input type="checkbox" checked="checked"/>
            <p>叉</p>
            </div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-8-单选列表-radio"><a href="#2-8-单选列表-radio" class="headerlink" title="2.8 单选列表 radio"></a>2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">配置参数</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li>
<li><code>选中状态</code>: checked</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />
            <p>纯文本测试</p>
            </div>
<div class='checkbox checked'><input type="radio" checked="checked"/>
            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>
            </div>
<div class='checkbox red'><input type="radio" />
            <p>支持自定义颜色</p>
            </div>
<div class='checkbox green'><input type="radio" />
            <p>绿色</p>
            </div>
<div class='checkbox yellow'><input type="radio" />
            <p>黄色</p>
            </div>
<div class='checkbox cyan'><input type="radio" />
            <p>青色</p>
            </div>
<div class='checkbox blue'><input type="radio" />
            <p>蓝色</p>
            </div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-9-时间轴-timeline"><a href="#2-9-时间轴-timeline" class="headerlink" title="2.9 时间轴 timeline"></a>2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">配置参数</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>title</code>:标题/时间线</li>
<li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p>
</div></div><div class='timeline-item-content'><ol>
<li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li>
<li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li>
<li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li>
<li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li>
<li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li>
</ol>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p>
</div></div><div class='timeline-item-content'><p>不需要额外处理。</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p>
</div></div><div class='timeline-item-content'><ol>
<li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li>
<li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li>
<li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li>
</ol>
</div></div></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-10-链接卡片-link"><a href="#2-10-链接卡片-link" class="headerlink" title="2.10 链接卡片 link"></a>2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">示例源码</button><button type="button" class="tab " data-href="分栏-3">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-11-按钮-btns"><a href="#2-11-按钮-btns" class="headerlink" title="2.11 按钮 btns"></a>2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">参数配置</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li>圆角样式：rounded, circle</li>
<li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li>
<li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>wide</td>
<td>宽一点的按钮</td>
</tr>
<tr>
<td>fill</td>
<td>填充布局，自动铺满至少一行，多了会换行</td>
</tr>
<tr>
<td>center</td>
<td>居中，按钮之间是固定间距</td>
</tr>
<tr>
<td>around</td>
<td>居中分散</td>
</tr>
<tr>
<td>grid2</td>
<td>等宽最多2列，屏幕变窄会适当减少列数</td>
</tr>
<tr>
<td>grid3</td>
<td>等宽最多3列，屏幕变窄会适当减少列数</td>
</tr>
<tr>
<td>grid4</td>
<td>等宽最多4列，屏幕变窄会适当减少列数</td>
</tr>
<tr>
<td>grid5</td>
<td>等宽最多5列，屏幕变窄会适当减少列数</td>
</tr>
</tbody>
</table>
</div></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure>
<p>2.或者含有图标的按钮<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></p>
<p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></p></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p>
<div class="btns circle grid5">
            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
<a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
<a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
<a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
<a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>
          </div>
2.或者含有图标的按钮
<div class="btns rounded grid5">
            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a>
<a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>
          </div>
3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中
<div class="btns circle center grid5">
            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>
  <i class='fab fa-apple'></i>
  <b>心率管家</b>
  <p class='p red'>专业版</p>
  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'>
</a>
<a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>
  <i class='fab fa-apple'></i>
  <b>心率管家</b>
  <p class='p green'>免费版</p>
  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'>
</a>
          </div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-12-github卡片-ghcard"><a href="#2-12-github卡片-ghcard" class="headerlink" title="2.12 github卡片 ghcard"></a>2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">参数配置</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>参数名</strong></th>
<th>取值</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td>hide</td>
<td>stars,commits,prs,issues,contribs</td>
<td>隐藏指定统计</td>
</tr>
<tr>
<td>count_private</td>
<td>true</td>
<td>将私人项目贡献添加到总提交计数中</td>
</tr>
<tr>
<td>show_icons</td>
<td>true</td>
<td>显示图标</td>
</tr>
<tr>
<td>theme</td>
<td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td>
<td>主题</td>
</tr>
</tbody>
</table>
</div></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure>
<p>2.仓库信息卡片</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th>
<th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th>
</tr>
</thead>
<tbody>
<tr>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td>
</tr>
<tr>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td>
</tr>
<tr>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td>
</tr>
</tbody>
</table>
</div>
<p>2.仓库信息卡片</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th>
<th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th>
</tr>
</thead>
<tbody>
<tr>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td>
</tr>
<tr>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td>
</tr>
<tr>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td>
<td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td>
</tr>
</tbody>
</table>
</div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-13-github徽标-ghbdage"><a href="#2-13-github徽标-ghbdage" class="headerlink" title="2.13 github徽标 ghbdage"></a>2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">配置参数</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>left</code>：徽标左边的信息，必选参数。</li>
<li><code>right</code>: 徽标右边的信息，必选参数，</li>
<li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li>
<li><code>color</code>：徽标右边的颜色，可选参数。</li>
<li><code>link</code>：指向的链接，可选参数。</li>
<li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li>
<li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li>
</ol></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure>
<p>2.信息参数，定义徽标右侧内容背景色，指向链接</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure>
<p>3.拓展参数，支持shields的API的全部参数内容</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p>
<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object>
<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object>

<p>2.信息参数，定义徽标右侧内容背景色，指向链接</p>
<object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object>
//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割
<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object>

<p>3.拓展参数，支持shields的API的全部参数内容</p>
<object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object>
//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割
<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-14-网站卡片-sites"><a href="#2-14-网站卡片-sites" class="headerlink" title="2.14 网站卡片 sites"></a>2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">示例源码</button><button type="button" class="tab " data-href="分栏-3">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a>
<a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a>
<a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a>
<a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a>
<a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-15-行内图片-inlineimage"><a href="#2-15-行内图片-inlineimage" class="headerlink" title="2.15 行内图片 inlineimage"></a>2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">参数配置</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>高度</code>：height=20px</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p>
<p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-16-单张图片-image"><a href="#2-16-单张图片-image" class="headerlink" title="2.16 单张图片 image"></a>2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">参数配置</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li>图片宽度高度：width=300px, height=32px</li>
<li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li>
<li>占位背景色：bg=#f2f2f2</li>
</ol></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><br>2.指定宽度<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><br>3.指定宽度并添加描述：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><br>4.设置占位背景色：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure></p></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p>
<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>
2..指定宽度
<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>
3.指定宽度并添加描述：
<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>
4.设置占位背景色：
<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-17-音频-audio"><a href="#2-17-音频-audio" class="headerlink" title="2.17 音频 audio"></a>2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">示例源码</button><button type="button" class="tab " data-href="分栏-3">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-18-视频-video"><a href="#2-18-视频-video" class="headerlink" title="2.18 视频 video"></a>2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">标签语法</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>对齐方向</code>：left, center, right</li>
<li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li>
</ol></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure>
<p>2.50%宽度<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><br>3.25%宽度</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
2.50%宽度
<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>
3.25%宽度
<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>
<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-19-相册-gallery"><a href="#2-19-相册-gallery" class="headerlink" title="2.19 相册 gallery"></a>2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">参数配置</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>2.gallery 相册<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></p></div><div class="tab-item-content" id="分栏-2"><ul>
<li>gallerygroup 相册图库</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数名</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>图库名字</td>
</tr>
<tr>
<td>description</td>
<td>图库描述</td>
</tr>
<tr>
<td>link</td>
<td>链接到对应相册的地址</td>
</tr>
<tr>
<td>img-url</td>
<td>图库封面</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><p>gallery 相册</p>
<p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p>
</li>
</ul></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>2.gallery 相册</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p>
<div class="gallery-group-main">
<figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">MC</div>
  <p>在Rikkaの六花服务器里留下的足迹</p>
  <a href='/gallery/MC/'></a>
  </figcaption>
  </figure>

<figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">Gundam</div>
  <p>哦咧哇gundam哒！</p>
  <a href='/gallery/Gundam/'></a>
  </figcaption>
  </figure>

<figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">I-am-Akilar</div>
  <p>某种意义上也算自拍吧</p>
  <a href='/gallery/I-am-Akilar/'></a>
  </figcaption>
  </figure>

</div>
2.gallery 相册

<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-20-折叠框-folding"><a href="#2-20-折叠框-folding" class="headerlink" title="2.20 折叠框 folding"></a>2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">示例源码</button><button type="button" class="tab " data-href="分栏-3">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><br><!-- tab 参数配置 --></p>
<ol>
<li><p><code>颜色</code>：blue, cyan, green, yellow, red</p>
</li>
<li><p><code>状态</code>：状态填写 open 代表默认打开。</p>
</li>
</ol></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>
              <div class='content'>
              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>
              </div>
            </details>

<details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>
              <div class='content'>
              <p>这是一个默认打开的折叠框。</p>
              </div>
            </details>

<details class="folding-tag" green><summary> 查看代码测试 </summary>
              <div class='content'>
              <p>假装这里有代码块（代码块没法嵌套代码块）</p>
              </div>
            </details>

<details class="folding-tag" yellow><summary> 查看列表测试 </summary>
              <div class='content'>
              <ul><li>haha</li><li>hehe</li></ul>
              </div>
            </details>

<details class="folding-tag" red><summary> 查看嵌套测试 </summary>
              <div class='content'>
              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>
              </div>
            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-21-分栏-tab"><a href="#2-21-分栏-tab" class="headerlink" title="2.21 分栏 tab"></a>2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">配置参数</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><p>Unique name :</p>
<ul>
<li><p>选项卡块标签的唯一名称，不带逗号。</p>
</li>
<li><p>将在#id中用作每个标签及其索引号的前缀。</p>
</li>
<li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p>
</li>
<li><p>仅当前帖子/页面的URL必须是唯一的！</p>
</li>
</ul>
</li>
<li><p>[index]:</p>
<ul>
<li><p>活动选项卡的索引号。</p>
</li>
<li><p>如果未指定，将选择第一个标签（1）。</p>
</li>
<li><p>如果index为-1，则不会选择任何选项卡。</p>
</li>
<li><p>可选参数。</p>
</li>
</ul>
</li>
<li><p>[Tab caption]:</p>
<ul>
<li><p>当前选项卡的标题。</p>
</li>
<li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p>
</li>
<li><p>如果未指定标题，但指定了图标，则标题将为空。</p>
</li>
<li><p>可选参数。</p>
</li>
</ul>
</li>
<li><p>[@icon]:</p>
<ul>
<li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p>
</li>
<li><p>可以指定带空格或不带空格；</p>
</li>
<li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p>
</li>
<li><p>可选参数。</p>
</li>
</ul>
</li>
</ol></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<p>2.Demo 2 - 预设选择tabs</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<p>3.Demo 3 - 没有预设值</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p>
<div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<p>2.Demo 2 - 预设选择tabs</p>
<div class="tabs" id="test2"><ul class="nav-tabs"><button type="button" class="tab " data-href="test2-1">test2 1</button><button type="button" class="tab " data-href="test2-2">test2 2</button><button type="button" class="tab  active" data-href="test2-3">test2 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<p>3.Demo 3 - 没有预设值</p>
<div class="tabs" id="test3"><ul class="nav-tabs no-default"><button type="button" class="tab " data-href="test3-1">test3 1</button><button type="button" class="tab " data-href="test3-2">test3 2</button><button type="button" class="tab " data-href="test3-3">test3 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p>
<div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">第一个Tab</button><button type="button" class="tab " data-href="test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button><button type="button" class="tab " data-href="test4-3"><i class="fas fa-bomb"></i>炸弹</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-22-诗词标签-poem"><a href="#2-22-诗词标签-poem" class="headerlink" title="2.22 诗词标签 poem"></a>2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">参数配置</button><button type="button" class="tab " data-href="分栏-2">示例源码</button><button type="button" class="tab " data-href="分栏-3">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol>
<li><code>title</code>：诗词标题</li>
<li><code>author</code>：作者，可以不写</li>
</ol></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p>
<p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p>
</div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-23-阿里图标-icon"><a href="#2-23-阿里图标-icon" class="headerlink" title="2.23 阿里图标 icon"></a>2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">参数配置</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li>
<li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg>

<svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg>

<svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg>

<svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg>

<svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg>

<svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg>

<svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg>

<svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg>

<svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg>

<svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg>

<svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg>

<svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-24-特效标签wow"><a href="#2-24-特效标签wow" class="headerlink" title="2.24 特效标签wow"></a>2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li>
<li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li>
<li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li>
<li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li>
<li><code>iteration</code>: 选填项，动画重复的次数</li>
</ol></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><br>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><br>3.slideInRight动画效果，持续5s，延时5s<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><br>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></p></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p>
<div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p>
</div></div>

<p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p>
<div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p>
</div></div>

<p>3.slideInRight动画效果，持续5s，延时5s</p>
<div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p>
</div></div>

<p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p>
<div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p>
</div></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-25-进度条-progress"><a href="#2-25-进度条-progress" class="headerlink" title="2.25  进度条 progress"></a>2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p>
</div>
<div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">参数配置</button><button type="button" class="tab " data-href="分栏-2">标签语法</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>width</code>: 0到100的阿拉伯数字</li>
<li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li>
<li><code>text</code>:进度条上的文字内容</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>
<div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-26-注释-notation"><a href="#2-26-注释-notation" class="headerlink" title="2.26 注释 notation"></a>2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">参数配置</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><p><code>label</code>: 注释词汇</p>
</li>
<li><p><code>text</code>: 悬停显示的注解内容</p>
</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-27-气泡注释-bubble"><a href="#2-27-气泡注释-bubble" class="headerlink" title="2.27 气泡注释 bubble"></a>2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">参数配置</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>content</code>: 注释词汇</li>
<li><code>notation</code>: 悬停显示的注解内容</li>
<li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span>&lt;/span&gt;，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局”，用来为盒状模型提供最大的灵活性”</span>&lt;/span&gt;，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span>&lt;/span&gt;，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span>&lt;/span&gt;写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span>&lt;/span&gt;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-28-引用文献-reference"><a href="#2-28-引用文献-reference" class="headerlink" title="2.28 引用文献 reference"></a>2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">参数配置</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><p>referto 引用上标</p>
<ul>
<li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p>
</li>
<li><p><code>literature</code>: 引用的参考文献名称</p>
</li>
</ul>
</li>
<li><p>referfrom 引用出处</p>
<ul>
<li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p>
</li>
<li><p><code>literature</code>: 引用的参考文献名称</p>
</li>
<li><p><code>url</code>: 引用的参考文献链接，可省略</p>
</li>
</ul>
</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;，Butterfly主题<span class="hidden-anchor" id="referto_[3]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;</p>
<p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<span class="hidden-anchor" id="referto_[7]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<span class="hidden-anchor" id="referto_[8]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<span class="hidden-anchor" id="referto_[9]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;</p>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div>
<div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-29-PDF展示"><a href="#2-29-PDF展示" class="headerlink" title="2.29 PDF展示"></a>2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">参数配置</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li><code>文件路径</code>: 可以是相对路径或者是在线链接</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p>
<pre><code>&lt;div class=&quot;row&quot;&gt;
&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
&lt;/div&gt;
</code></pre></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-30-Hexo-tag-map-插件"><a href="#2-30-Hexo-tag-map-插件" class="headerlink" title="2.30 Hexo-tag-map 插件"></a>2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">参数配置</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">地图名</th>
<th style="text-align:center">标签值 &lt;必填&gt;</th>
<th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th>
<th style="text-align:center">缩放等级 (默认 14)</th>
<th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th>
<th style="text-align:center">默认图层 (默认 1)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">混合地图</td>
<td style="text-align:center">map</td>
<td style="text-align:center">百分数或具体值 (100% 或 360px)</td>
<td style="text-align:center">取值 3~18</td>
<td style="text-align:center">百分数或具体值 (100% 或 360px)</td>
<td style="text-align:center">取值 1~7</td>
</tr>
<tr>
<td style="text-align:center">谷歌地图</td>
<td style="text-align:center">googleMap</td>
<td style="text-align:center">百分数或具体值 (100% 或 360px)</td>
<td style="text-align:center">取值 1~20</td>
<td style="text-align:center">百分数或具体值 (100% 或 360px)</td>
<td style="text-align:center">取值 1~3</td>
</tr>
<tr>
<td style="text-align:center">高德地图</td>
<td style="text-align:center">gaodeMap</td>
<td style="text-align:center">百分数或具体值 (100% 或 360px)</td>
<td style="text-align:center">取值 3~18</td>
<td style="text-align:center">百分数或具体值 (100% 或 360px)</td>
<td style="text-align:center">取值 1~3</td>
</tr>
<tr>
<td style="text-align:center">百度地图</td>
<td style="text-align:center">baiduMap</td>
<td style="text-align:center">百分数或具体值 (100% 或 360px)</td>
<td style="text-align:center">取值 4~18</td>
<td style="text-align:center">百分数或具体值 (100% 或 360px)</td>
<td style="text-align:center">取值 1~2</td>
</tr>
<tr>
<td style="text-align:center">Geoq 地图</td>
<td style="text-align:center">geoqMap</td>
<td style="text-align:center">百分数或具体值 (100% 或 360px)</td>
<td style="text-align:center">取值 1~18</td>
<td style="text-align:center">百分数或具体值 (100% 或 360px)</td>
<td style="text-align:center">取值 1~5</td>
</tr>
<tr>
<td style="text-align:center">openstreet 地图</td>
<td style="text-align:center">openstreetMap</td>
<td style="text-align:center">百分数或具体值 (100% 或 360px)</td>
<td style="text-align:center">取值 1~18</td>
<td style="text-align:center">百分数或具体值 (100% 或 360px)</td>
<td style="text-align:center">不支持此参数</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>参数之间，用英文逗号相隔</li>
<li>参数必须按上述事例顺序输入，不得为空</li>
<li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li>
<li>参数取值必须在上述范围内</li>
<li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li>
<li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li>
<li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li>
<li>谷歌地图需要外网才能加载查看</li>
</ol>
<p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><p><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div>&lt;/div&gt;<script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><br></p>
<p><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><br></p>
<p><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><br></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-31-隐藏块"><a href="#2-31-隐藏块" class="headerlink" title="2.31 隐藏块"></a>2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">参数配置</button><button type="button" class="tab " data-href="分栏-3">示例源码</button><button type="button" class="tab " data-href="分栏-4">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ol>
<li>content：要隐藏的内容</li>
<li>display：展示前按钮显示的文字（可选）</li>
<li>bg：按钮的背景颜色（可选）</li>
<li>color：按钮显示的文字的颜色（可选）</li>
</ol></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览
    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p>
</div></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/05/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Spring高级50讲</title>
    <url>/2022/08/09/spring%E9%AB%98%E7%BA%A750%E8%AE%B2/</url>
    <content><![CDATA[<h2 id="容器与-bean"><a href="#容器与-bean" class="headerlink" title="容器与 bean"></a>容器与 bean</h2><h3 id="1-容器接口"><a href="#1-容器接口" class="headerlink" title="1) 容器接口"></a>1) 容器接口</h3><ul>
<li><p>BeanFactory 接口，典型功能有：</p>
<ul>
<li>getBean</li>
</ul>
</li>
<li><p>ApplicationContext 接口，是 BeanFactory 的子接口。它扩展了 BeanFactory 接口的功能，如：</p>
<ul>
<li>国际化</li>
<li>通配符方式获取一组 Resource 资源</li>
<li>整合 Environment 环境（能通过它获取各种来源的配置信息）</li>
<li>事件发布与监听，实现组件之间的解耦</li>
</ul>
</li>
</ul>
<p>可以看到，我们课上讲的，都是 BeanFactory 提供的基本功能，ApplicationContext 中的扩展功能都没有用到。</p>
<h4 id="演示1-BeanFactory-与-ApplicationContext-的区别"><a href="#演示1-BeanFactory-与-ApplicationContext-的区别" class="headerlink" title="演示1 - BeanFactory 与 ApplicationContext 的区别"></a>演示1 - BeanFactory 与 ApplicationContext 的区别</h4><h5 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a01</strong> 包</p>
<h4 id="收获💡"><a href="#收获💡" class="headerlink" title="收获💡"></a>收获💡</h4><p>通过这个示例结合 debug 查看 ApplicationContext 对象的内部结构，学到：</p>
<ol>
<li><p>到底什么是 BeanFactory</p>
<ul>
<li>它是 ApplicationContext 的父接口</li>
<li>它才是 Spring 的核心容器, 主要的 ApplicationContext 实现都【组合】了它的功能，【组合】是指 ApplicationContext 的一个重要成员变量就是 BeanFactory</li>
</ul>
</li>
<li>BeanFactory 能干点啥<ul>
<li>表面上只有 getBean</li>
<li>实际上控制反转、基本的依赖注入、直至 Bean 的生命周期的各种功能，都由它的实现类提供</li>
<li>例子中通过反射查看了它的成员变量 singletonObjects，内部包含了所有的单例 bean</li>
</ul>
</li>
<li><p>ApplicationContext 比 BeanFactory 多点啥</p>
<ul>
<li>ApplicationContext 组合并扩展了 BeanFactory 的功能</li>
<li>国际化、通配符方式获取一组 Resource 资源、整合 Environment 环境、事件发布与监听</li>
<li>新学一种代码之间解耦途径，事件解耦</li>
</ul>
</li>
</ol>
<p>建议练习：完成用户注册与发送短信之间的解耦，用事件方式、和 AOP 方式分别实现</p>
<blockquote>
<p><strong><em>注意</em></strong></p>
<ul>
<li>如果 jdk &gt; 8, 运行时请添加 —add-opens java.base/java.lang=ALL-UNNAMED，这是因为这些版本的 jdk 默认不允许跨 module 反射</li>
<li>事件发布还可以异步，这个视频中没有展示，请自行查阅 @EnableAsync，@Async 的用法</li>
</ul>
</blockquote>
<h4 id="演示2-国际化"><a href="#演示2-国际化" class="headerlink" title="演示2 - 国际化"></a>演示2 - 国际化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMessageSource</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line"></span><br><span class="line">        context.registerBean(<span class="string">&quot;messageSource&quot;</span>, MessageSource.class, () -&gt; &#123;</span><br><span class="line">            <span class="type">ResourceBundleMessageSource</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceBundleMessageSource</span>();</span><br><span class="line">            ms.setDefaultEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            ms.setBasename(<span class="string">&quot;messages&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ms;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        System.out.println(context.getMessage(<span class="string">&quot;hi&quot;</span>, <span class="literal">null</span>, Locale.ENGLISH));</span><br><span class="line">        System.out.println(context.getMessage(<span class="string">&quot;hi&quot;</span>, <span class="literal">null</span>, Locale.CHINESE));</span><br><span class="line">        System.out.println(context.getMessage(<span class="string">&quot;hi&quot;</span>, <span class="literal">null</span>, Locale.JAPANESE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>国际化文件均在 src/resources 目录下</p>
<p>messages.properties（空）</p>
<p>messages_en.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">hi</span>=<span class="string">Hello</span></span><br></pre></td></tr></table></figure>
<p>messages_ja.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">hi</span>=<span class="string">こんにちは</span></span><br></pre></td></tr></table></figure>
<p>messages_zh.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">hi</span>=<span class="string">你好</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong><em>注意</em></strong></p>
<ul>
<li>ApplicationContext 中 MessageSource bean 的名字固定为 messageSource</li>
<li>使用 SpringBoot 时，国际化文件名固定为 messages</li>
<li>空的 messages.properties 也必须存在</li>
</ul>
</blockquote>
<h3 id="2-容器实现"><a href="#2-容器实现" class="headerlink" title="2) 容器实现"></a>2) 容器实现</h3><p>Spring 的发展历史较为悠久，因此很多资料还在讲解它较旧的实现，这里出于怀旧的原因，把它们都列出来，供大家参考</p>
<ul>
<li>DefaultListableBeanFactory，是 BeanFactory 最重要的实现，像<strong>控制反转</strong>和<strong>依赖注入</strong>功能，都是它来实现</li>
<li>ClassPathXmlApplicationContext，从类路径查找 XML 配置文件，创建容器（旧）</li>
<li>FileSystemXmlApplicationContext，从磁盘路径查找 XML 配置文件，创建容器（旧）</li>
<li>XmlWebApplicationContext，传统 SSM 整合时，基于 XML 配置文件的容器（旧）</li>
<li>AnnotationConfigWebApplicationContext，传统 SSM 整合时，基于 java 配置类的容器（旧）</li>
<li>AnnotationConfigApplicationContext，Spring boot 中非 web 环境容器（新）</li>
<li>AnnotationConfigServletWebServerApplicationContext，Spring boot 中 servlet web 环境容器（新）</li>
<li>AnnotationConfigReactiveWebServerApplicationContext，Spring boot 中 reactive web 环境容器（新）</li>
</ul>
<p>另外要注意的是，后面这些带有 ApplicationContext 的类都是 ApplicationContext 接口的实现，但它们是<strong>组合</strong>了 DefaultListableBeanFactory 的功能，并非继承而来</p>
<h4 id="演示1-DefaultListableBeanFactory"><a href="#演示1-DefaultListableBeanFactory" class="headerlink" title="演示1 - DefaultListableBeanFactory"></a>演示1 - DefaultListableBeanFactory</h4><h5 id="代码参考-1"><a href="#代码参考-1" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a02.TestBeanFactory</strong></p>
<h4 id="收获💡-1"><a href="#收获💡-1" class="headerlink" title="收获💡"></a>收获💡</h4><ul>
<li>beanFactory 可以通过 registerBeanDefinition 注册一个 bean definition 对象<ul>
<li>我们平时使用的配置类、xml、组件扫描等方式都是生成 bean definition 对象注册到 beanFactory 当中</li>
<li>bean definition 描述了这个 bean 的创建蓝图：scope 是什么、用构造还是工厂创建、初始化销毁方法是什么，等等</li>
</ul>
</li>
<li>beanFactory 需要手动调用 beanFactory 后处理器对它做增强<ul>
<li>例如通过解析 @Bean、@ComponentScan 等注解，来补充一些 bean definition</li>
</ul>
</li>
<li>beanFactory 需要手动添加 bean 后处理器，以便对后续 bean 的创建过程提供增强<ul>
<li>例如 @Autowired，@Resource 等注解的解析都是 bean 后处理器完成的</li>
<li>bean 后处理的添加顺序会对解析结果有影响，见视频中同时加 @Autowired，@Resource 的例子</li>
</ul>
</li>
<li>beanFactory 需要手动调用方法来初始化单例</li>
<li>beanFactory 需要额外设置才能解析 ${} 与 #{}</li>
</ul>
<h4 id="演示2-常见-ApplicationContext-实现"><a href="#演示2-常见-ApplicationContext-实现" class="headerlink" title="演示2 - 常见 ApplicationContext 实现"></a>演示2 - 常见 ApplicationContext 实现</h4><h5 id="代码参考-2"><a href="#代码参考-2" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a02.A02</strong></p>
<h4 id="收获💡-2"><a href="#收获💡-2" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>常见的 ApplicationContext 容器实现</li>
<li>内嵌容器、DispatcherServlet 的创建方法、作用</li>
</ol>
<h3 id="3-Bean-的生命周期"><a href="#3-Bean-的生命周期" class="headerlink" title="3) Bean 的生命周期"></a>3) Bean 的生命周期</h3><p>一个受 Spring 管理的 bean，生命周期主要阶段有</p>
<ol>
<li>创建：根据 bean 的构造方法或者工厂方法来创建 bean 实例对象</li>
<li>依赖注入：根据 @Autowired，@Value 或其它一些手段，为 bean 的成员变量填充值、建立关系</li>
<li>初始化：回调各种 Aware 接口，调用对象的各种初始化方法</li>
<li>销毁：在容器关闭时，会销毁所有单例对象（即调用它们的销毁方法）<ul>
<li>prototype 对象也能够销毁，不过需要容器这边主动调用</li>
</ul>
</li>
</ol>
<p>一些资料会提到，生命周期中还有一类 bean 后处理器：BeanPostProcessor，会在 bean 的初始化的前后，提供一些扩展逻辑。但这种说法是不完整的，见下面的演示1</p>
<p>1.构造器<br>2.aware接口,InitializingBean<br>3.BeanDefinitionRegistryPostProcessor<br>4.BeanFactoryPostProcessor<br>5.before<br>6.after</p>
<h4 id="演示1-bean-生命周期"><a href="#演示1-bean-生命周期" class="headerlink" title="演示1 - bean 生命周期"></a>演示1 - bean 生命周期</h4><h5 id="代码参考-3"><a href="#代码参考-3" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a03</strong> 包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line"></span><br><span class="line">创建 --&gt; 依赖注入</span><br><span class="line">依赖注入 --&gt; 初始化</span><br><span class="line">初始化 --&gt; 可用</span><br><span class="line">可用 --&gt; 销毁</span><br></pre></td></tr></table></figure>
<p>创建前后的增强</p>
<ul>
<li>postProcessBeforeInstantiation<ul>
<li>这里返回的对象若不为 null 会替换掉原本的 bean，并且仅会走 postProcessAfterInitialization 流程</li>
</ul>
</li>
<li>postProcessAfterInstantiation<ul>
<li>这里如果返回 false 会跳过依赖注入阶段</li>
</ul>
</li>
</ul>
<p>依赖注入前的增强</p>
<ul>
<li>postProcessProperties<ul>
<li>如 @Autowired、@Value、@Resource </li>
</ul>
</li>
</ul>
<p>初始化前后的增强</p>
<ul>
<li>postProcessBeforeInitialization<ul>
<li>这里返回的对象会替换掉原本的 bean</li>
<li>如 @PostConstruct、@ConfigurationProperties</li>
</ul>
</li>
<li>postProcessAfterInitialization <ul>
<li>这里返回的对象会替换掉原本的 bean</li>
<li>如代理增强</li>
</ul>
</li>
</ul>
<p>销毁之前的增强</p>
<ul>
<li>postProcessBeforeDestruction<ul>
<li>如 @PreDestroy </li>
</ul>
</li>
</ul>
<h4 id="收获💡-3"><a href="#收获💡-3" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>Spring bean 生命周期各个阶段</li>
<li>模板设计模式, 指大流程已经固定好了, 通过接口回调（bean 后处理器）在一些关键点前后提供扩展</li>
</ol>
<h4 id="演示2-模板方法设计模式"><a href="#演示2-模板方法设计模式" class="headerlink" title="演示2 - 模板方法设计模式"></a>演示2 - 模板方法设计模式</h4><h5 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethodTemplate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBeanFactory</span>();</span><br><span class="line">        beanFactory.addBeanPostProcessor(bean -&gt; System.out.println(<span class="string">&quot;解析 @Autowired&quot;</span>));</span><br><span class="line">        beanFactory.addBeanPostProcessor(bean -&gt; System.out.println(<span class="string">&quot;解析 @Resource&quot;</span>));</span><br><span class="line">        beanFactory.getBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模板方法  Template Method Pattern</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactory</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;构造 &quot;</span> + bean);</span><br><span class="line">            System.out.println(<span class="string">&quot;依赖注入 &quot;</span> + bean); <span class="comment">// @Autowired, @Resource</span></span><br><span class="line">            <span class="keyword">for</span> (BeanPostProcessor processor : processors) &#123;</span><br><span class="line">                processor.inject(bean);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;初始化 &quot;</span> + bean);</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> List&lt;BeanPostProcessor&gt; processors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBeanPostProcessor</span><span class="params">(BeanPostProcessor processor)</span> &#123;</span><br><span class="line">            processors.add(processor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">interface</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">(Object bean)</span>; <span class="comment">// 对依赖注入阶段的扩展</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="演示3-bean-后处理器排序"><a href="#演示3-bean-后处理器排序" class="headerlink" title="演示3 - bean 后处理器排序"></a>演示3 - bean 后处理器排序</h4><h5 id="代码参考-4"><a href="#代码参考-4" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a03.TestProcessOrder</strong></p>
<h4 id="收获💡-4"><a href="#收获💡-4" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>实现了 PriorityOrdered 接口的优先级最高</li>
<li>实现了 Ordered 接口与加了 @Order 注解的平级, 按数字升序</li>
<li>其它的排在最后</li>
</ol>
<h3 id="4-Bean-后处理器"><a href="#4-Bean-后处理器" class="headerlink" title="4) Bean 后处理器"></a>4) Bean 后处理器</h3><h4 id="演示1-后处理器作用"><a href="#演示1-后处理器作用" class="headerlink" title="演示1 - 后处理器作用"></a>演示1 - 后处理器作用</h4><h5 id="代码参考-5"><a href="#代码参考-5" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a04</strong> 包</p>
<h4 id="收获💡-5"><a href="#收获💡-5" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>@Autowired 等注解的解析属于 bean 生命周期阶段（依赖注入, 初始化）的扩展功能，这些扩展功能由 bean 后处理器来完成</li>
<li>每个后处理器各自增强什么功能<ul>
<li>AutowiredAnnotationBeanPostProcessor 解析 @Autowired 与 @Value</li>
<li>CommonAnnotationBeanPostProcessor 解析 @Resource、@PostConstruct、@PreDestroy</li>
<li>ConfigurationPropertiesBindingPostProcessor 解析 @ConfigurationProperties</li>
</ul>
</li>
<li>另外 ContextAnnotationAutowireCandidateResolver 负责获取 @Value 的值，解析 @Qualifier、泛型、@Lazy 等</li>
</ol>
<h4 id="演示2-Autowired-bean-后处理器运行分析"><a href="#演示2-Autowired-bean-后处理器运行分析" class="headerlink" title="演示2 - @Autowired bean 后处理器运行分析"></a>演示2 - @Autowired bean 后处理器运行分析</h4><h5 id="代码参考-6"><a href="#代码参考-6" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a04.DigInAutowired</strong></p>
<h4 id="收获💡-6"><a href="#收获💡-6" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>AutowiredAnnotationBeanPostProcessor.findAutowiringMetadata 用来获取某个 bean 上加了 @Value @Autowired 的成员变量，方法参数的信息，表示为 InjectionMetadata</li>
<li>InjectionMetadata 可以完成依赖注入</li>
<li>InjectionMetadata 内部根据成员变量，方法参数封装为 DependencyDescriptor 类型</li>
<li>有了 DependencyDescriptor，就可以利用 beanFactory.doResolveDependency 方法进行基于类型的查找</li>
</ol>
<h3 id="5-BeanFactory-后处理器"><a href="#5-BeanFactory-后处理器" class="headerlink" title="5) BeanFactory 后处理器"></a>5) BeanFactory 后处理器</h3><h4 id="演示1-BeanFactory-后处理器的作用"><a href="#演示1-BeanFactory-后处理器的作用" class="headerlink" title="演示1 - BeanFactory 后处理器的作用"></a>演示1 - BeanFactory 后处理器的作用</h4><h5 id="代码参考-7"><a href="#代码参考-7" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a05</strong> 包</p>
<ul>
<li>ConfigurationClassPostProcessor 可以解析<ul>
<li>@ComponentScan</li>
<li>@Bean</li>
<li>@Import</li>
<li>@ImportResource</li>
</ul>
</li>
<li>MapperScannerConfigurer 可以解析<ul>
<li>Mapper 接口</li>
</ul>
</li>
</ul>
<h4 id="收获💡-7"><a href="#收获💡-7" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>@ComponentScan, @Bean, @Mapper 等注解的解析属于核心容器（即 BeanFactory）的扩展功能</li>
<li>这些扩展功能由不同的 BeanFactory 后处理器来完成，其实主要就是补充了一些 bean 定义</li>
</ol>
<h4 id="演示2-模拟解析-ComponentScan"><a href="#演示2-模拟解析-ComponentScan" class="headerlink" title="演示2 - 模拟解析 @ComponentScan"></a>演示2 - 模拟解析 @ComponentScan</h4><h5 id="代码参考-8"><a href="#代码参考-8" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a05.ComponentScanPostProcessor</strong></p>
<h4 id="收获💡-8"><a href="#收获💡-8" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>Spring 操作元数据的工具类 CachingMetadataReaderFactory</li>
<li>通过注解元数据（AnnotationMetadata）获取直接或间接标注的注解信息</li>
<li>通过类元数据（ClassMetadata）获取类名，AnnotationBeanNameGenerator 生成 bean 名</li>
<li>解析元数据是基于 ASM 技术</li>
</ol>
<h4 id="演示3-模拟解析-Bean"><a href="#演示3-模拟解析-Bean" class="headerlink" title="演示3 - 模拟解析 @Bean"></a>演示3 - 模拟解析 @Bean</h4><h5 id="代码参考-9"><a href="#代码参考-9" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a05.AtBeanPostProcessor</strong></p>
<h4 id="收获💡-9"><a href="#收获💡-9" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>进一步熟悉注解元数据（AnnotationMetadata）获取方法上注解信息</li>
</ol>
<h4 id="演示4-模拟解析-Mapper-接口"><a href="#演示4-模拟解析-Mapper-接口" class="headerlink" title="演示4 - 模拟解析 Mapper 接口"></a>演示4 - 模拟解析 Mapper 接口</h4><h5 id="代码参考-10"><a href="#代码参考-10" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a05.MapperPostProcessor</strong></p>
<h4 id="收获💡-10"><a href="#收获💡-10" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>Mapper 接口被 Spring 管理的本质：实际是被作为 MapperFactoryBean 注册到容器中</li>
<li>Spring 的诡异做法，根据接口生成的 BeanDefinition 仅为根据接口名生成 bean 名</li>
</ol>
<h3 id="6-Aware-接口"><a href="#6-Aware-接口" class="headerlink" title="6) Aware 接口"></a>6) Aware 接口</h3><h4 id="演示-Aware-接口及-InitializingBean-接口"><a href="#演示-Aware-接口及-InitializingBean-接口" class="headerlink" title="演示 - Aware 接口及 InitializingBean 接口"></a>演示 - Aware 接口及 InitializingBean 接口</h4><h5 id="代码参考-11"><a href="#代码参考-11" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a06</strong> 包</p>
<h4 id="收获💡-11"><a href="#收获💡-11" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li><p>Aware 接口提供了一种【内置】 的注入手段，例如</p>
<ul>
<li>BeanNameAware 注入 bean 的名字</li>
<li>BeanFactoryAware 注入 BeanFactory 容器</li>
<li>ApplicationContextAware 注入 ApplicationContext 容器</li>
<li>EmbeddedValueResolverAware 注入 ${} 解析器</li>
</ul>
</li>
<li><p>InitializingBean 接口提供了一种【内置】的初始化手段</p>
</li>
<li><p>对比</p>
<ul>
<li><p>内置的注入和初始化不受扩展功能的影响，总会被执行</p>
</li>
<li><p>而扩展功能受某些情况影响可能会失效</p>
</li>
<li><p>因此 Spring 框架内部的类常用内置注入和初始化</p>
</li>
</ul>
</li>
</ol>
<h3 id="6）Aware接口补充"><a href="#6）Aware接口补充" class="headerlink" title="6）Aware接口补充"></a>6）Aware接口补充</h3><p>根据你提供的信息，我可以理解你在谈论Spring框架中的一些接口和机制，特别是与依赖注入和初始化相关的内容。让我为你解释一下：</p>
<ol>
<li><p>Aware 接口:<br>Aware 接口是Spring框架中的一组接口，用于在Bean实例化过程中提供额外的元数据信息或资源。这些接口允许Bean获取与Spring容器相关的信息，以便更好地与容器进行交互。例如，不同的 Aware 接口提供了以下信息：</p>
<ul>
<li><code>BeanNameAware</code>: 允许Bean获取其在容器中的名字。</li>
<li><code>BeanFactoryAware</code>: 允许Bean获取访问所在的BeanFactory（容器）。</li>
<li><code>ApplicationContextAware</code>: 允许Bean获取访问所在的ApplicationContext（应用上下文）。</li>
<li><code>EmbeddedValueResolverAware</code>: 允许Bean获取解析 <code>$&#123;&#125;</code> 占位符的功能。</li>
</ul>
<p>这些接口可以通过实现相应的接口并提供相应的回调方法来实现。</p>
</li>
<li><p>InitializingBean 接口:<br><code>InitializingBean</code> 是Spring框架提供的一个接口，当Bean被实例化后，容器会调用它的 <code>afterPropertiesSet()</code> 方法，从而允许Bean在初始化时执行一些自定义的操作。这使得Bean能够在完全被容器创建后，进行一些必要的初始化工作。</p>
</li>
</ol>
<p>对比：</p>
<ul>
<li>内置的注入和初始化（使用 Aware 接口和 InitializingBean 接口）不受扩展功能的影响，它们总会在Bean生命周期的特定阶段被执行，无论是否使用了扩展功能。</li>
<li>而某些扩展功能可能会受到特定条件或情况的影响，导致它们失效或不按预期执行。</li>
<li>因此，Spring框架内部的类通常会使用内置的注入和初始化方法，以确保这些操作始终按照预期执行，无论是否存在扩展功能。</li>
</ul>
<p>总的来说，Aware 接口和 InitializingBean 接口为开发者提供了一种在Bean生命周期的不同阶段执行自定义操作的机制，而且它们在Spring框架内部被广泛使用。不过需要注意的是，随着Spring框架的发展，还可能出现了新的机制或变化，所以建议查阅最新的Spring文档以获取最准确的信息。</p>
<h4 id="配置类-Autowired-失效分析"><a href="#配置类-Autowired-失效分析" class="headerlink" title="配置类 @Autowired 失效分析"></a>配置类 @Autowired 失效分析</h4><p>Java 配置类不包含 BeanFactoryPostProcessor 的情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram </span><br><span class="line">participant ac as ApplicationContext</span><br><span class="line">participant bfpp as BeanFactoryPostProcessor</span><br><span class="line">participant bpp as BeanPostProcessor</span><br><span class="line">participant config as Java配置类</span><br><span class="line">ac -&gt;&gt; bfpp : 1. 执行 BeanFactoryPostProcessor</span><br><span class="line">ac -&gt;&gt; bpp : 2. 注册 BeanPostProcessor</span><br><span class="line">ac -&gt;&gt; +config : 3. 创建和初始化</span><br><span class="line">bpp -&gt;&gt; config : 3.1 依赖注入扩展(如 @Value 和 @Autowired)</span><br><span class="line">bpp -&gt;&gt; config : 3.2 初始化扩展(如 @PostConstruct)</span><br><span class="line">ac -&gt;&gt; config : 3.3 执行 Aware 及 InitializingBean</span><br><span class="line">config --&gt;&gt; -ac : 3.4 创建成功</span><br></pre></td></tr></table></figure>
<p>Java 配置类包含 BeanFactoryPostProcessor 的情况，因此要创建其中的 BeanFactoryPostProcessor 必须提前创建 Java 配置类，而此时的 BeanPostProcessor 还未准备好，导致 @Autowired 等注解失效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram </span><br><span class="line">participant ac as ApplicationContext</span><br><span class="line">participant bfpp as BeanFactoryPostProcessor</span><br><span class="line">participant bpp as BeanPostProcessor</span><br><span class="line">participant config as Java配置类</span><br><span class="line">ac -&gt;&gt; +config : 3. 创建和初始化</span><br><span class="line">ac -&gt;&gt; config : 3.1 执行 Aware 及 InitializingBean</span><br><span class="line">config --&gt;&gt; -ac : 3.2 创建成功</span><br><span class="line"></span><br><span class="line">ac -&gt;&gt; bfpp : 1. 执行 BeanFactoryPostProcessor</span><br><span class="line">ac -&gt;&gt; bpp : 2. 注册 BeanPostProcessor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>对应代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(MyConfig1.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;注入 ApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//  ⬅️ 注释或添加 beanFactory 后处理器对应上方两种情况</span></span><br><span class="line">    <span class="keyword">public</span> BeanFactoryPostProcessor <span class="title function_">processor1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;执行 processor1&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong><em>注意</em></strong></p>
<p>解决方法：</p>
<ul>
<li>用内置依赖注入和初始化取代扩展依赖注入和初始化</li>
<li>用静态工厂方法代替实例工厂方法，避免工厂对象提前被创建</li>
</ul>
</blockquote>
<h3 id="7-初始化与销毁"><a href="#7-初始化与销毁" class="headerlink" title="7) 初始化与销毁"></a>7) 初始化与销毁</h3><h4 id="演示-初始化销毁顺序"><a href="#演示-初始化销毁顺序" class="headerlink" title="演示 - 初始化销毁顺序"></a>演示 - 初始化销毁顺序</h4><h5 id="代码参考-12"><a href="#代码参考-12" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a07</strong> 包</p>
<h4 id="收获💡-12"><a href="#收获💡-12" class="headerlink" title="收获💡"></a>收获💡</h4><p>Spring 提供了多种初始化手段，除了课堂上讲的 @PostConstruct，@Bean(initMethod) 之外，还可以实现 InitializingBean 接口来进行初始化，如果同一个 bean 用了以上手段声明了 3 个初始化方法，那么它们的执行顺序是</p>
<ol>
<li>@PostConstruct 标注的初始化方法</li>
<li>InitializingBean 接口的初始化方法</li>
<li>@Bean(initMethod) 指定的初始化方法</li>
</ol>
<p>与初始化类似，Spring 也提供了多种销毁手段，执行顺序为</p>
<ol>
<li>@PreDestroy 标注的销毁方法</li>
<li>DisposableBean 接口的销毁方法</li>
<li>@Bean(destroyMethod) 指定的销毁方法</li>
</ol>
<h3 id="8-Scope"><a href="#8-Scope" class="headerlink" title="8) Scope"></a>8) Scope</h3><p>在当前版本的 Spring 和 Spring Boot 程序中，支持五种 Scope</p>
<ul>
<li>singleton，容器启动时创建（未设置延迟），容器关闭时销毁</li>
<li>prototype，每次使用时创建，不会自动销毁，需要调用 DefaultListableBeanFactory.destroyBean(bean) 销毁</li>
<li>request，每次请求用到此 bean 时创建，请求结束时销毁</li>
<li>session，每个会话用到此 bean 时创建，会话结束时销毁</li>
<li>application，web 容器用到此 bean 时创建，容器停止时销毁</li>
</ul>
<p>有些文章提到有 globalSession 这一 Scope，也是陈旧的说法，目前 Spring 中已废弃</p>
<p>但要注意，如果在 singleton 注入其它 scope 都会有问题，解决方法有</p>
<ul>
<li>@Lazy</li>
<li>@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)</li>
<li>ObjectFactory</li>
<li>ApplicationContext.getBean</li>
</ul>
<h4 id="演示1-request-session-application-作用域"><a href="#演示1-request-session-application-作用域" class="headerlink" title="演示1 - request, session, application 作用域"></a>演示1 - request, session, application 作用域</h4><h5 id="代码参考-13"><a href="#代码参考-13" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a08</strong> 包</p>
<ul>
<li>打开不同的浏览器, 刷新 <a href="http://localhost:8080/test">http://localhost:8080/test</a> 即可查看效果</li>
<li>如果 jdk &gt; 8, 运行时请添加 —add-opens java.base/java.lang=ALL-UNNAMED</li>
</ul>
<h4 id="收获💡-13"><a href="#收获💡-13" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>有几种 scope</li>
<li>在 singleton 中使用其它几种 scope 的方法</li>
<li>其它 scope 的销毁时机<ul>
<li>可以将通过 server.servlet.session.timeout=30s 观察 session bean 的销毁</li>
<li>ServletContextScope 销毁机制疑似实现有误</li>
</ul>
</li>
</ol>
<h4 id="分析-singleton-注入其它-scope-失效"><a href="#分析-singleton-注入其它-scope-失效" class="headerlink" title="分析 - singleton 注入其它 scope 失效"></a>分析 - singleton 注入其它 scope 失效</h4><p>以单例注入多例为例</p>
<p>有一个单例对象 E</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(E.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> F f;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">E</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;E()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setF</span><span class="params">(F f)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.f = f;</span><br><span class="line">        log.info(<span class="string">&quot;setF(F f) &#123;&#125;&quot;</span>, f.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> F <span class="title function_">getF</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要注入的对象 F 期望是多例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(F.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">F</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;F()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> context.getBean(E.class);</span><br><span class="line"><span class="type">F</span> <span class="variable">f1</span> <span class="operator">=</span> e.getF();</span><br><span class="line"><span class="type">F</span> <span class="variable">f2</span> <span class="operator">=</span> e.getF();</span><br><span class="line">System.out.println(f1);</span><br><span class="line">System.out.println(f2);</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.itheima.demo.cycle.F@6622fc65</span><br><span class="line">com.itheima.demo.cycle.F@6622fc65</span><br></pre></td></tr></table></figure>
<p>发现它们是同一个对象，而不是期望的多例对象</p>
<p>对于单例对象来讲，依赖注入仅发生了一次，后续再没有用到多例的 F，因此 E 用的始终是第一次依赖注入的 F</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line"></span><br><span class="line">e1(e 创建)</span><br><span class="line">e2(e set 注入 f)</span><br><span class="line"></span><br><span class="line">f1(f 创建)</span><br><span class="line"></span><br><span class="line">e1--&gt;f1--&gt;e2</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>解决</p>
<ul>
<li>仍然使用 @Lazy 生成代理</li>
<li>代理对象虽然还是同一个，但当每次<strong>使用代理对象的任意方法</strong>时，由代理创建新的 f 对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line"></span><br><span class="line">e1(e 创建)</span><br><span class="line">e2(e set 注入 f代理)</span><br><span class="line"></span><br><span class="line">f1(f 创建)</span><br><span class="line">f2(f 创建)</span><br><span class="line">f3(f 创建)</span><br><span class="line"></span><br><span class="line">e1--&gt;e2</span><br><span class="line">e2--使用f方法--&gt;f1</span><br><span class="line">e2--使用f方法--&gt;f2</span><br><span class="line">e2--使用f方法--&gt;f3</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setF</span><span class="params">(F f)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.f = f;</span><br><span class="line">        log.info(<span class="string">&quot;setF(F f) &#123;&#125;&quot;</span>, f.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong><em>注意</em></strong></p>
<ul>
<li>@Lazy 加在也可以加在成员变量上，但加在 set 方法上的目的是可以观察输出，加在成员变量上就不行了</li>
<li>@Autowired 加在 set 方法的目的类似</li>
</ul>
</blockquote>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E: setF(F f) class com.itheima.demo.cycle.F$$EnhancerBySpringCGLIB$$8b54f2bc</span><br><span class="line">F: F()</span><br><span class="line">com.itheima.demo.cycle.F@3a6f2de3</span><br><span class="line">F: F()</span><br><span class="line">com.itheima.demo.cycle.F@56303b57</span><br></pre></td></tr></table></figure>
<p>从输出日志可以看到调用 setF 方法时，f 对象的类型是代理类型</p>
<h4 id="演示2-4种解决方法"><a href="#演示2-4种解决方法" class="headerlink" title="演示2 - 4种解决方法"></a>演示2 - 4种解决方法</h4><h5 id="代码参考-14"><a href="#代码参考-14" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a08.sub</strong> 包</p>
<ul>
<li>如果 jdk &gt; 8, 运行时请添加 —add-opens java.base/java.lang=ALL-UNNAMED</li>
</ul>
<h4 id="收获💡-14"><a href="#收获💡-14" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>单例注入其它 scope 的四种解决方法<ul>
<li>@Lazy</li>
<li>@Scope(value = “prototype”, proxyMode = ScopedProxyMode.TARGET_CLASS)</li>
<li>ObjectFactory</li>
<li>ApplicationContext</li>
</ul>
</li>
<li>解决方法虽然不同，但理念上殊途同归: 都是推迟其它 scope bean 的获取</li>
</ol>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP 底层实现方式之一是代理，由代理结合通知和目标，提供增强功能</p>
<p>除此以外，aspectj 提供了两种另外的 AOP 底层实现：</p>
<ul>
<li><p>第一种是通过 ajc 编译器在<strong>编译</strong> class 类文件时，就把通知的增强功能，织入到目标类的字节码中</p>
</li>
<li><p>第二种是通过 agent 在<strong>加载</strong>目标类时，修改目标类的字节码，织入增强功能</p>
</li>
<li>作为对比，之前学习的代理是<strong>运行</strong>时生成新的字节码</li>
</ul>
<p>简单比较的话：</p>
<ul>
<li>aspectj 在编译和加载时，修改目标字节码，性能较高</li>
<li>aspectj 因为不用代理，能突破一些技术上的限制，例如对构造、对静态方法、对 final 也能增强</li>
<li>但 aspectj 侵入性较强，且需要学习新的 aspectj 特有语法，因此没有广泛流行</li>
</ul>
<h3 id="9-AOP-实现之-ajc-编译器"><a href="#9-AOP-实现之-ajc-编译器" class="headerlink" title="9) AOP 实现之 ajc 编译器"></a>9) AOP 实现之 ajc 编译器</h3><p>代码参考项目 <strong>demo6_advanced_aspectj_01</strong></p>
<h4 id="收获💡-15"><a href="#收获💡-15" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>编译器也能修改 class 实现增强</li>
<li>编译器增强能突破代理仅能通过方法重写增强的限制：可以对构造方法、静态方法等实现增强</li>
</ol>
<blockquote>
<p><strong><em>注意</em></strong></p>
<ul>
<li>版本选择了 java 8, 因为目前的 aspectj-maven-plugin 1.14.0 最高只支持到 java 16</li>
<li>一定要用 maven 的 compile 来编译, idea 不会调用 ajc 编译器</li>
</ul>
</blockquote>
<h3 id="10-AOP-实现之-agent-类加载"><a href="#10-AOP-实现之-agent-类加载" class="headerlink" title="10) AOP 实现之 agent 类加载"></a>10) AOP 实现之 agent 类加载</h3><p>代码参考项目 <strong>demo6_advanced_aspectj_02</strong></p>
<h4 id="收获💡-16"><a href="#收获💡-16" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>类加载时可以通过 agent 修改 class 实现增强</li>
</ol>
<h3 id="11-AOP-实现之-proxy"><a href="#11-AOP-实现之-proxy" class="headerlink" title="11) AOP 实现之 proxy"></a>11) AOP 实现之 proxy</h3><h4 id="演示1-jdk-动态代理"><a href="#演示1-jdk-动态代理" class="headerlink" title="演示1 - jdk 动态代理"></a>演示1 - jdk 动态代理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;target foo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] param)</span> &#123;</span><br><span class="line">        <span class="comment">// 目标对象</span></span><br><span class="line">        <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">        <span class="comment">// 代理对象</span></span><br><span class="line">        <span class="type">Foo</span> <span class="variable">proxy</span> <span class="operator">=</span> (Foo) Proxy.newProxyInstance(</span><br><span class="line">                Target.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Foo.class&#125;,</span><br><span class="line">                (p, method, args) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;proxy before...&quot;</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">                    System.out.println(<span class="string">&quot;proxy after...&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">// 调用代理</span></span><br><span class="line">        proxy.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy before...</span><br><span class="line">target foo</span><br><span class="line">proxy after...</span><br></pre></td></tr></table></figure>
<h4 id="收获💡-17"><a href="#收获💡-17" class="headerlink" title="收获💡"></a>收获💡</h4><ul>
<li>jdk 动态代理要求目标<strong>必须</strong>实现接口，生成的代理类实现相同接口，因此代理与目标之间是平级兄弟关系</li>
</ul>
<h4 id="演示2-cglib-代理"><a href="#演示2-cglib-代理" class="headerlink" title="演示2 - cglib 代理"></a>演示2 - cglib 代理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;target foo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] param)</span> &#123;</span><br><span class="line">        <span class="comment">// 目标对象</span></span><br><span class="line">        <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">        <span class="comment">// 代理对象</span></span><br><span class="line">        <span class="type">Target</span> <span class="variable">proxy</span> <span class="operator">=</span> (Target) Enhancer.create(Target.class, </span><br><span class="line">                (MethodInterceptor) (p, method, args, methodProxy) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;proxy before...&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> methodProxy.invoke(target, args);</span><br><span class="line">            <span class="comment">// 另一种调用方法，不需要目标对象实例</span></span><br><span class="line"><span class="comment">//            Object result = methodProxy.invokeSuper(p, args);</span></span><br><span class="line">            System.out.println(<span class="string">&quot;proxy after...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 调用代理</span></span><br><span class="line">        proxy.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果与 jdk 动态代理相同</p>
<h4 id="收获💡-18"><a href="#收获💡-18" class="headerlink" title="收获💡"></a>收获💡</h4><ul>
<li>cglib 不要求目标实现接口，它生成的代理类是目标的子类，因此代理与目标之间是子父关系</li>
<li>限制⛔：根据上述分析 final 类无法被 cglib 增强</li>
</ul>
<h3 id="12-jdk-动态代理进阶"><a href="#12-jdk-动态代理进阶" class="headerlink" title="12) jdk 动态代理进阶"></a>12) jdk 动态代理进阶</h3><h4 id="演示1-模拟-jdk-动态代理"><a href="#演示1-模拟-jdk-动态代理" class="headerlink" title="演示1 - 模拟 jdk 动态代理"></a>演示1 - 模拟 jdk 动态代理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A12</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">bar</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;target foo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;target bar&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] param)</span> &#123;</span><br><span class="line">        <span class="comment">// ⬇️1. 创建代理，这时传入 InvocationHandler</span></span><br><span class="line">        <span class="type">Foo</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$Proxy0</span>(<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;    </span><br><span class="line">            <span class="comment">// ⬇️5. 进入 InvocationHandler</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">                <span class="comment">// ⬇️6. 功能增强</span></span><br><span class="line">                System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">                <span class="comment">// ⬇️7. 反射调用目标方法</span></span><br><span class="line">                <span class="keyword">return</span> method.invoke(<span class="keyword">new</span> <span class="title class_">Target</span>(), args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// ⬇️2. 调用代理方法</span></span><br><span class="line">        proxy.foo();</span><br><span class="line">        proxy.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模拟代理实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ⬇️这就是 jdk 代理类的源码, 秘密都在里面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">A12</span>.Foo &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler h) &#123;</span><br><span class="line">        <span class="built_in">super</span>(h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ⬇️3. 进入代理方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// ⬇️4. 回调 InvocationHandler</span></span><br><span class="line">            h.invoke(<span class="built_in">this</span>, foo, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> h.invoke(<span class="built_in">this</span>, bar, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">int</span>) result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Method foo;</span><br><span class="line">    <span class="keyword">static</span> Method bar;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            foo = A12.Foo.class.getMethod(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            bar = A12.Foo.class.getMethod(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="收获💡-19"><a href="#收获💡-19" class="headerlink" title="收获💡"></a>收获💡</h4><p>代理一点都不难，无非就是利用了多态、反射的知识</p>
<ol>
<li>方法重写可以增强逻辑，只不过这【增强逻辑】千变万化，不能写死在代理内部</li>
<li>通过接口回调将【增强逻辑】置于代理类之外</li>
<li>配合接口方法反射（是多态调用），就可以再联动调用目标方法</li>
<li>会用 arthas 的 jad 工具反编译代理类</li>
<li>限制⛔：代理增强是借助多态来实现，因此成员变量、静态方法、final 方法均不能通过代理实现</li>
</ol>
<h4 id="演示2-方法反射优化"><a href="#演示2-方法反射优化" class="headerlink" title="演示2 - 方法反射优化"></a>演示2 - 方法反射优化</h4><h5 id="代码参考-15"><a href="#代码参考-15" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a12.TestMethodInvoke</strong></p>
<h4 id="收获💡-20"><a href="#收获💡-20" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>前 16 次反射性能较低</li>
<li>第 17 次调用会生成代理类，优化为非反射调用</li>
<li>会用 arthas 的 jad 工具反编译第 17 次调用生成的代理类</li>
</ol>
<blockquote>
<p><strong><em>注意</em></strong></p>
<p>运行时请添加 —add-opens java.base/java.lang.reflect=ALL-UNNAMED —add-opens java.base/jdk.internal.reflect=ALL-UNNAMED</p>
</blockquote>
<h3 id="13-cglib-代理进阶"><a href="#13-cglib-代理进阶" class="headerlink" title="13) cglib 代理进阶"></a>13) cglib 代理进阶</h3><h4 id="演示-模拟-cglib-代理"><a href="#演示-模拟-cglib-代理" class="headerlink" title="演示 - 模拟 cglib 代理"></a>演示 - 模拟 cglib 代理</h4><h5 id="代码参考-16"><a href="#代码参考-16" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a13</strong> 包</p>
<h4 id="收获💡-21"><a href="#收获💡-21" class="headerlink" title="收获💡"></a>收获💡</h4><p>和 jdk 动态代理原理查不多</p>
<ol>
<li>回调的接口换了一下，InvocationHandler 改成了 MethodInterceptor</li>
<li>调用目标时有所改进，见下面代码片段<ol>
<li>method.invoke 是反射调用，必须调用到足够次数才会进行优化</li>
<li>methodProxy.invoke 是不反射调用，它会正常（间接）调用目标对象的方法（Spring 采用）</li>
<li>methodProxy.invokeSuper 也是不反射调用，它会正常（间接）调用代理对象的方法，可以省略目标对象</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A14Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>();</span><br><span class="line">        </span><br><span class="line">        proxy.setCallbacks(<span class="keyword">new</span> <span class="title class_">Callback</span>[]&#123;(MethodInterceptor) (p, m, a, mp) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;proxy before...&quot;</span> + mp.getSignature());</span><br><span class="line">            <span class="comment">// ⬇️调用目标方法(三种)</span></span><br><span class="line"><span class="comment">//            Object result = m.invoke(target, a);  // ⬅️反射调用</span></span><br><span class="line"><span class="comment">//            Object result = mp.invoke(target, a); // ⬅️非反射调用, 结合目标用</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> mp.invokeSuper(p, a);   <span class="comment">// ⬅️非反射调用, 结合代理用</span></span><br><span class="line">            System.out.println(<span class="string">&quot;proxy after...&quot;</span> + mp.getSignature());</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ⬇️调用代理方法</span></span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong><em>注意</em></strong></p>
<ul>
<li>调用 Object 的方法, 后两种在 jdk &gt;= 9 时都有问题, 需要 —add-opens java.base/java.lang=ALL-UNNAMED</li>
</ul>
</blockquote>
<h3 id="14-cglib-避免反射调用"><a href="#14-cglib-避免反射调用" class="headerlink" title="14) cglib 避免反射调用"></a>14) cglib 避免反射调用</h3><h4 id="演示-cglib-如何避免反射"><a href="#演示-cglib-如何避免反射" class="headerlink" title="演示 - cglib 如何避免反射"></a>演示 - cglib 如何避免反射</h4><h5 id="代码参考-17"><a href="#代码参考-17" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a13.ProxyFastClass</strong>，<strong>com.itheima.a13.TargetFastClass</strong></p>
<h4 id="收获💡-22"><a href="#收获💡-22" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>当调用 MethodProxy 的 invoke 或 invokeSuper 方法时, 会动态生成两个类<ul>
<li>ProxyFastClass 配合代理对象一起使用, 避免反射</li>
<li>TargetFastClass 配合目标对象一起使用, 避免反射 (Spring 用的这种)</li>
</ul>
</li>
<li>TargetFastClass 记录了 Target 中方法与编号的对应关系<ul>
<li>save(long) 编号 2</li>
<li>save(int) 编号 1</li>
<li>save() 编号 0</li>
<li>首先根据方法名和参数个数、类型, 用 switch 和 if 找到这些方法编号</li>
<li>然后再根据编号去调用目标方法, 又用了一大堆 switch 和 if, 但避免了反射</li>
</ul>
</li>
<li>ProxyFastClass 记录了 Proxy 中方法与编号的对应关系，不过 Proxy 额外提供了下面几个方法<ul>
<li>saveSuper(long) 编号 2，不增强，仅是调用 super.save(long)</li>
<li>saveSuper(int) 编号 1，不增强, 仅是调用 super.save(int)</li>
<li>saveSuper() 编号 0，不增强, 仅是调用 super.save()</li>
<li>查找方式与 TargetFastClass 类似</li>
</ul>
</li>
<li>为什么有这么麻烦的一套东西呢？<ul>
<li>避免反射, 提高性能, 代价是一个代理类配两个 FastClass 类, 代理类中还得增加仅调用 super 的一堆方法</li>
<li>用编号处理方法对应关系比较省内存, 另外, 最初获得方法顺序是不确定的, 这个过程没法固定死</li>
</ul>
</li>
</ol>
<h3 id="15-jdk-和-cglib-在-Spring-中的统一"><a href="#15-jdk-和-cglib-在-Spring-中的统一" class="headerlink" title="15) jdk 和 cglib 在 Spring 中的统一"></a>15) jdk 和 cglib 在 Spring 中的统一</h3><p>Spring 中对切点、通知、切面的抽象如下</p>
<ul>
<li>切点：接口 Pointcut，典型实现 AspectJExpressionPointcut</li>
<li>通知：典型接口为 MethodInterceptor 代表环绕通知</li>
<li>切面：Advisor，包含一个 Advice 通知，PointcutAdvisor 包含一个 Advice 通知和一个 Pointcut</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line"></span><br><span class="line">class Advice</span><br><span class="line">class MethodInterceptor</span><br><span class="line">class Advisor</span><br><span class="line">class PointcutAdvisor</span><br><span class="line"></span><br><span class="line">Pointcut &lt;|-- AspectJExpressionPointcut</span><br><span class="line">Advice &lt;|-- MethodInterceptor</span><br><span class="line">Advisor &lt;|-- PointcutAdvisor</span><br><span class="line">PointcutAdvisor o-- &quot;一&quot; Pointcut</span><br><span class="line">PointcutAdvisor o-- &quot;一&quot; Advice</span><br><span class="line"></span><br><span class="line">&lt;&lt;interface&gt;&gt; Advice</span><br><span class="line">&lt;&lt;interface&gt;&gt; MethodInterceptor</span><br><span class="line">&lt;&lt;interface&gt;&gt; Pointcut</span><br><span class="line">&lt;&lt;interface&gt;&gt; Advisor</span><br><span class="line">&lt;&lt;interface&gt;&gt; PointcutAdvisor</span><br></pre></td></tr></table></figure>
<p>代理相关类图</p>
<ul>
<li>AopProxyFactory 根据 proxyTargetClass 等设置选择 AopProxy 实现</li>
<li>AopProxy 通过 getProxy 创建代理对象</li>
<li>图中 Proxy 都实现了 Advised 接口，能够获得关联的切面集合与目标（其实是从 ProxyFactory 取得）</li>
<li>调用代理方法时，会借助 ProxyFactory 将通知统一转为环绕通知：MethodInterceptor</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line"></span><br><span class="line">Advised &lt;|-- ProxyFactory</span><br><span class="line">ProxyFactory o-- Target</span><br><span class="line">ProxyFactory o-- &quot;多&quot; Advisor</span><br><span class="line"></span><br><span class="line">ProxyFactory --&gt; AopProxyFactory : 使用</span><br><span class="line">AopProxyFactory --&gt; AopProxy</span><br><span class="line">Advised &lt;|-- 基于CGLIB的Proxy</span><br><span class="line">基于CGLIB的Proxy &lt;-- ObjenesisCglibAopProxy : 创建</span><br><span class="line">AopProxy &lt;|-- ObjenesisCglibAopProxy</span><br><span class="line">AopProxy &lt;|-- JdkDynamicAopProxy</span><br><span class="line">基于JDK的Proxy &lt;-- JdkDynamicAopProxy : 创建</span><br><span class="line">Advised &lt;|-- 基于JDK的Proxy</span><br><span class="line"></span><br><span class="line">class AopProxy &#123;</span><br><span class="line">   +getProxy() Object</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ProxyFactory &#123;</span><br><span class="line">	proxyTargetClass : boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ObjenesisCglibAopProxy &#123;</span><br><span class="line">	advised : ProxyFactory</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class JdkDynamicAopProxy &#123;</span><br><span class="line">	advised : ProxyFactory</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&lt;interface&gt;&gt; Advised</span><br><span class="line">&lt;&lt;interface&gt;&gt; AopProxyFactory</span><br><span class="line">&lt;&lt;interface&gt;&gt; AopProxy</span><br></pre></td></tr></table></figure>
<h4 id="演示-底层切点、通知、切面"><a href="#演示-底层切点、通知、切面" class="headerlink" title="演示 - 底层切点、通知、切面"></a>演示 - 底层切点、通知、切面</h4><h5 id="代码参考-18"><a href="#代码参考-18" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a15.A15</strong></p>
<h4 id="收获💡-23"><a href="#收获💡-23" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>底层的切点实现</li>
<li>底层的通知实现</li>
<li>底层的切面实现</li>
<li>ProxyFactory 用来创建代理<ul>
<li>如果指定了接口，且 proxyTargetClass = false，使用 JdkDynamicAopProxy</li>
<li>如果没有指定接口，或者 proxyTargetClass = true，使用 ObjenesisCglibAopProxy<ul>
<li>例外：如果目标是接口类型或已经是 Jdk 代理，使用 JdkDynamicAopProxy</li>
</ul>
</li>
</ul>
</li>
</ol>
<blockquote>
<p><strong><em>注意</em></strong></p>
<ul>
<li>要区分本章节提到的 MethodInterceptor，它与之前 cglib 中用的的 MethodInterceptor 是不同的接口</li>
</ul>
</blockquote>
<h3 id="16-切点匹配"><a href="#16-切点匹配" class="headerlink" title="16) 切点匹配"></a>16) 切点匹配</h3><h4 id="演示-切点匹配"><a href="#演示-切点匹配" class="headerlink" title="演示 - 切点匹配"></a>演示 - 切点匹配</h4><h5 id="代码参考-19"><a href="#代码参考-19" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a16.A16</strong></p>
<h4 id="收获💡-24"><a href="#收获💡-24" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>常见 aspectj 切点用法</li>
<li>aspectj 切点的局限性，实际的 @Transactional 切点实现</li>
</ol>
<h3 id="17-从-Aspect-到-Advisor"><a href="#17-从-Aspect-到-Advisor" class="headerlink" title="17) 从 @Aspect 到 Advisor"></a>17) 从 @Aspect 到 Advisor</h3><h4 id="演示1-代理创建器"><a href="#演示1-代理创建器" class="headerlink" title="演示1 - 代理创建器"></a>演示1 - 代理创建器</h4><h5 id="代码参考-20"><a href="#代码参考-20" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>org.springframework.aop.framework.autoproxy</strong> 包</p>
<h4 id="收获💡-25"><a href="#收获💡-25" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>AnnotationAwareAspectJAutoProxyCreator 的作用<ul>
<li>将高级 @Aspect 切面统一为低级 Advisor 切面</li>
<li>在合适的时机创建代理</li>
</ul>
</li>
<li>findEligibleAdvisors 找到有【资格】的 Advisors<ul>
<li>有【资格】的 Advisor 一部分是低级的, 可以由自己编写, 如本例 A17 中的 advisor3</li>
<li>有【资格】的 Advisor 另一部分是高级的, 由解析 @Aspect 后获得</li>
</ul>
</li>
<li>wrapIfNecessary<ul>
<li>它内部调用 findEligibleAdvisors, 只要返回集合不空, 则表示需要创建代理</li>
<li>它的调用时机通常在原始对象初始化后执行, 但碰到循环依赖会提前至依赖注入之前执行</li>
</ul>
</li>
</ol>
<h4 id="演示2-代理创建时机"><a href="#演示2-代理创建时机" class="headerlink" title="演示2 - 代理创建时机"></a>演示2 - 代理创建时机</h4><h5 id="代码参考-21"><a href="#代码参考-21" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>org.springframework.aop.framework.autoproxy.A17_1</strong></p>
<h4 id="收获💡-26"><a href="#收获💡-26" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>代理的创建时机<ul>
<li>初始化之后 (无循环依赖时)</li>
<li>实例创建后, 依赖注入前 (有循环依赖时), 并暂存于二级缓存</li>
</ul>
</li>
<li>依赖注入与初始化不应该被增强, 仍应被施加于原始对象</li>
</ol>
<h4 id="演示3-Before-对应的低级通知"><a href="#演示3-Before-对应的低级通知" class="headerlink" title="演示3 - @Before 对应的低级通知"></a>演示3 - @Before 对应的低级通知</h4><h5 id="代码参考-22"><a href="#代码参考-22" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>org.springframework.aop.framework.autoproxy.A17_2</strong></p>
<h4 id="收获💡-27"><a href="#收获💡-27" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>@Before 前置通知会被转换为原始的 AspectJMethodBeforeAdvice 形式, 该对象包含了如下信息<ol>
<li>通知代码从哪儿来</li>
<li>切点是什么(这里为啥要切点, 后面解释)</li>
<li>通知对象如何创建, 本例共用同一个 Aspect 对象</li>
</ol>
</li>
<li>类似的还有<ol>
<li>AspectJAroundAdvice (环绕通知)</li>
<li>AspectJAfterReturningAdvice</li>
<li>AspectJAfterThrowingAdvice (环绕通知)</li>
<li>AspectJAfterAdvice (环绕通知)</li>
</ol>
</li>
</ol>
<h3 id="18-静态通知调用"><a href="#18-静态通知调用" class="headerlink" title="18) 静态通知调用"></a>18) 静态通知调用</h3><p>代理对象调用流程如下（以 JDK 动态代理实现为例）</p>
<ul>
<li>从 ProxyFactory 获得 Target 和环绕通知链，根据他俩创建 MethodInvocation，简称 mi</li>
<li>首次执行 mi.proceed() 发现有下一个环绕通知，调用它的 invoke(mi)</li>
<li>进入环绕通知1，执行前增强，再次调用 mi.proceed() 发现有下一个环绕通知，调用它的 invoke(mi)</li>
<li>进入环绕通知2，执行前增强，调用 mi.proceed() 发现没有环绕通知，调用 mi.invokeJoinPoint() 执行目标方法</li>
<li>目标方法执行结束，将结果返回给环绕通知2，执行环绕通知2 的后增强</li>
<li>环绕通知2继续将结果返回给环绕通知1，执行环绕通知1 的后增强</li>
<li>环绕通知1返回最终的结果</li>
</ul>
<p>图中不同颜色对应一次环绕通知或目标的调用起始至终结</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant Proxy</span><br><span class="line">participant ih as InvocationHandler</span><br><span class="line">participant mi as MethodInvocation</span><br><span class="line">participant Factory as ProxyFactory</span><br><span class="line">participant mi1 as MethodInterceptor1</span><br><span class="line">participant mi2 as MethodInterceptor2</span><br><span class="line">participant Target</span><br><span class="line"></span><br><span class="line">Proxy -&gt;&gt; +ih : invoke()</span><br><span class="line">ih -&gt;&gt; +Factory : 获得 Target</span><br><span class="line">Factory --&gt;&gt; -ih : </span><br><span class="line">ih -&gt;&gt; +Factory : 获得 MethodInterceptor 链</span><br><span class="line">Factory --&gt;&gt; -ih : </span><br><span class="line">ih -&gt;&gt; +mi : 创建 mi</span><br><span class="line">mi --&gt;&gt; -ih : </span><br><span class="line">rect rgb(200, 223, 255)</span><br><span class="line">ih -&gt;&gt; +mi : mi.proceed()</span><br><span class="line">mi -&gt;&gt; +mi1 : invoke(mi)</span><br><span class="line">mi1 -&gt;&gt; mi1 : 前增强</span><br><span class="line">rect rgb(200, 190, 255)</span><br><span class="line">mi1 -&gt;&gt; mi : mi.proceed()</span><br><span class="line">mi -&gt;&gt; +mi2 : invoke(mi)</span><br><span class="line">mi2 -&gt;&gt; mi2 : 前增强</span><br><span class="line">rect rgb(150, 190, 155)</span><br><span class="line">mi2 -&gt;&gt; mi : mi.proceed()</span><br><span class="line">mi -&gt;&gt; +Target : mi.invokeJoinPoint()</span><br><span class="line">Target -&gt;&gt; Target : </span><br><span class="line">Target --&gt;&gt; -mi2 : 结果</span><br><span class="line">end</span><br><span class="line">mi2 -&gt;&gt; mi2 : 后增强</span><br><span class="line">mi2 --&gt;&gt; -mi1 : 结果</span><br><span class="line">end</span><br><span class="line">mi1 -&gt;&gt; mi1 : 后增强</span><br><span class="line">mi1 --&gt;&gt; -mi : 结果</span><br><span class="line">mi --&gt;&gt; -ih : </span><br><span class="line">end</span><br><span class="line">ih --&gt;&gt; -Proxy : </span><br></pre></td></tr></table></figure>
<h4 id="演示1-通知调用过程"><a href="#演示1-通知调用过程" class="headerlink" title="演示1 - 通知调用过程"></a>演示1 - 通知调用过程</h4><h5 id="代码参考-23"><a href="#代码参考-23" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>org.springframework.aop.framework.A18</strong></p>
<h4 id="收获💡-28"><a href="#收获💡-28" class="headerlink" title="收获💡"></a>收获💡</h4><p>代理方法执行时会做如下工作</p>
<ol>
<li>通过 proxyFactory 的 getInterceptorsAndDynamicInterceptionAdvice() 将其他通知统一转换为 MethodInterceptor 环绕通知<ul>
<li>MethodBeforeAdviceAdapter 将 @Before AspectJMethodBeforeAdvice 适配为 MethodBeforeAdviceInterceptor</li>
<li>AfterReturningAdviceAdapter 将 @AfterReturning AspectJAfterReturningAdvice 适配为 AfterReturningAdviceInterceptor</li>
<li>这体现的是适配器设计模式</li>
</ul>
</li>
<li>所谓静态通知，体现在上面方法的 Interceptors 部分，这些通知调用时无需再次检查切点，直接调用即可</li>
<li>结合目标与环绕通知链，创建 MethodInvocation 对象，通过它完成整个调用</li>
</ol>
<h4 id="演示2-模拟-MethodInvocation"><a href="#演示2-模拟-MethodInvocation" class="headerlink" title="演示2 - 模拟 MethodInvocation"></a>演示2 - 模拟 MethodInvocation</h4><h5 id="代码参考-24"><a href="#代码参考-24" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>org.springframework.aop.framework.A18_1</strong></p>
<h4 id="收获💡-29"><a href="#收获💡-29" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>proceed() 方法调用链中下一个环绕通知</li>
<li>每个环绕通知内部继续调用 proceed()</li>
<li>调用到没有更多通知了, 就调用目标方法</li>
</ol>
<p>MethodInvocation 的编程技巧在实现拦截器、过滤器时能用上</p>
<h3 id="19-动态通知调用"><a href="#19-动态通知调用" class="headerlink" title="19) 动态通知调用"></a>19) 动态通知调用</h3><h4 id="演示-带参数绑定的通知方法调用"><a href="#演示-带参数绑定的通知方法调用" class="headerlink" title="演示 - 带参数绑定的通知方法调用"></a>演示 - 带参数绑定的通知方法调用</h4><h5 id="代码参考-25"><a href="#代码参考-25" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>org.springframework.aop.framework.autoproxy.A19</strong></p>
<h4 id="收获💡-30"><a href="#收获💡-30" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>通过 proxyFactory 的 getInterceptorsAndDynamicInterceptionAdvice() 将其他通知统一转换为 MethodInterceptor 环绕通知</li>
<li>所谓动态通知，体现在上面方法的 DynamicInterceptionAdvice 部分，这些通知调用时因为要为通知方法绑定参数，还需再次利用切点表达式</li>
<li>动态通知调用复杂程度高，性能较低</li>
</ol>
<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="20-RequestMappingHandlerMapping-与-RequestMappingHandlerAdapter"><a href="#20-RequestMappingHandlerMapping-与-RequestMappingHandlerAdapter" class="headerlink" title="20) RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter"></a>20) RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter</h3><p>RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter 俩是一对，分别用来</p>
<ul>
<li>处理 @RequestMapping 映射</li>
<li>调用控制器方法、并处理方法参数与方法返回值</li>
</ul>
<h4 id="演示1-DispatcherServlet-初始化"><a href="#演示1-DispatcherServlet-初始化" class="headerlink" title="演示1 - DispatcherServlet 初始化"></a>演示1 - DispatcherServlet 初始化</h4><h5 id="代码参考-26"><a href="#代码参考-26" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a20</strong> 包</p>
<h4 id="收获💡-31"><a href="#收获💡-31" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>DispatcherServlet 是在第一次被访问时执行初始化, 也可以通过配置修改为 Tomcat 启动后就初始化</li>
<li>在初始化时会从 Spring 容器中找一些 Web 需要的组件, 如 HandlerMapping、HandlerAdapter 等，并逐一调用它们的初始化</li>
<li>RequestMappingHandlerMapping 初始化时，会收集所有 @RequestMapping 映射信息，封装为 Map，其中<ul>
<li>key 是 RequestMappingInfo 类型，包括请求路径、请求方法等信息</li>
<li>value 是 HandlerMethod 类型，包括控制器方法对象、控制器对象</li>
<li>有了这个 Map，就可以在请求到达时，快速完成映射，找到 HandlerMethod 并与匹配的拦截器一起返回给 DispatcherServlet</li>
</ul>
</li>
<li><p>RequestMappingHandlerAdapter 初始化时，会准备 HandlerMethod 调用时需要的各个组件，如：</p>
<ul>
<li>HandlerMethodArgumentResolver 解析控制器方法参数</li>
<li>HandlerMethodReturnValueHandler 处理控制器方法返回值</li>
</ul>
<p>5.控制器默认返回视图名称</p>
<p>6.Listenter监听ServletConfig域创建加载spring容器；</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//xml方式</span><br><span class="line"> <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext2.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">//注解方式</span><br><span class="line"> <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.itheima.util.MyAnnotationConfigWebApplicationContext<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">//spring-mvc.xml存放controller,即使用注解扫描扫描controller</span><br><span class="line">//springapplication.xml 存放其他配置元数据</span><br><span class="line">//当我们将SpringMVC组件例如handlerMapping的默认实现配置导spring容器是原先的默认实现会被替换</span><br></pre></td></tr></table></figure>
<p><img src="C:\Users\19181\Pictures\Vue学习\screenshot-20230809-195048.png" alt="screenshot-20230809-195048"></p>
<p>DispatcherServlet默认组件的实现在此</p>
<p><img src="C:\Users\19181\Pictures\Vue学习\screenshot-20230809-201005.png" alt="screenshot-20230809-201005"></p>
<p>因为实现有多个所以是List</p>
<p><img src="C:\Users\19181\Pictures\Vue学习\screenshot-20230809-200850.png" alt="screenshot-20230809-200850"></p>
<p>默认初始化策略</p>
<p><img src="C:\Users\19181\Pictures\Vue学习\screenshot-20230809-200938.png" alt="screenshot-20230809-200938"></p>
<p>从spring容器中获取用户配置的handelrMapping的实现没有配置则使用默认实现，即加载dispatchservlet.properties中对应的所有实现</p>
<p><img src="C:\Users\19181\Pictures\Vue学习\screenshot-20230809-200950.png" alt="screenshot-20230809-200950"></p>
<p>用户没有在spring容器中指定handlerMapping实现就会执行这个，指定就不会加载dispatchservlet.properties中对应的所有实现</p>
<p>1.转发：服务器内部发生客户端url不改变 “forward: /index.html”</p>
<p>2.重定向：”redirect: index.html”;</p>
<p>同步方式响应数据</p>
<p>1.直接响应加@ResposeBody注解</p>
<p>2.返回视图名</p>
<p>3.返回ModeAndView对象</p>
<h4 id="演示2-自定义参数与返回值处理器"><a href="#演示2-自定义参数与返回值处理器" class="headerlink" title="演示2 - 自定义参数与返回值处理器"></a>演示2 - 自定义参数与返回值处理器</h4><h5 id="代码参考-27"><a href="#代码参考-27" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a20.TokenArgumentResolver</strong> ，<strong>com.itheima.a20.YmlReturnValueHandler</strong></p>
<h4 id="收获💡-32"><a href="#收获💡-32" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>体会参数解析器的作用</li>
<li>体会返回值处理器的作用</li>
</ol>
<h3 id="21-参数解析器"><a href="#21-参数解析器" class="headerlink" title="21) 参数解析器"></a>21) 参数解析器</h3><h4 id="演示-常见参数解析器"><a href="#演示-常见参数解析器" class="headerlink" title="演示 - 常见参数解析器"></a>演示 - 常见参数解析器</h4><h5 id="代码参考-28"><a href="#代码参考-28" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a21</strong> 包</p>
<h4 id="收获💡-33"><a href="#收获💡-33" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>初步了解 RequestMappingHandlerAdapter 的调用过程<ol>
<li>控制器方法被封装为 HandlerMethod</li>
<li>准备对象绑定与类型转换</li>
<li>准备 ModelAndViewContainer 用来存储中间 Model 结果</li>
<li>解析每个参数值</li>
</ol>
</li>
<li>解析参数依赖的就是各种参数解析器，它们都有两个重要方法<ul>
<li>supportsParameter 判断是否支持方法参数</li>
<li>resolveArgument 解析方法参数</li>
</ul>
</li>
<li>常见参数的解析<ul>
<li>@RequestParam（方法参数名和路径参数名一致可以不用加，但是使用List,Map这样的集合时必须要加，因为springmvc会获取参数并创建对象，但是这样的接口无法创建对象，所以会报错）</li>
<li>省略 @RequestParam</li>
<li>@RequestParam(defaultValue)</li>
<li>MultipartFile</li>
<li>@PathVariable</li>
<li>@RequestHeader</li>
<li>@CookieValue</li>
<li>@Value</li>
<li>HttpServletRequest 等</li>
<li>@ModelAttribute    User  , url: ( name = “a” &amp; age =18)</li>
<li>默认省略 @ModelAttribute</li>
<li>@RequestBody</li>
</ul>
</li>
<li>组合模式在 Spring 中的体现</li>
<li>@RequestParam, @CookieValue 等注解中的参数名、默认值, 都可以写成活的, 即从 ${ } #{ }中获取</li>
</ol>
<h3 id="22-参数名解析"><a href="#22-参数名解析" class="headerlink" title="22) 参数名解析"></a>22) 参数名解析</h3><h4 id="演示-两种方法获取参数名"><a href="#演示-两种方法获取参数名" class="headerlink" title="演示 - 两种方法获取参数名"></a>演示 - 两种方法获取参数名</h4><h5 id="代码参考-29"><a href="#代码参考-29" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a22.A22</strong></p>
<h4 id="收获💡-34"><a href="#收获💡-34" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>如果编译时添加了 -parameters 可以生成参数表, 反射时就可以拿到参数名</li>
<li>如果编译时添加了 -g 可以生成调试信息, 但分为两种情况<ul>
<li>普通类, 会包含局部变量表, 用 asm 可以拿到参数名</li>
<li>接口, 不会包含局部变量表, 无法获得参数名<ul>
<li>这也是 MyBatis 在实现 Mapper 接口时为何要提供 @Param 注解来辅助获得参数名</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="23-对象绑定与类型转换"><a href="#23-对象绑定与类型转换" class="headerlink" title="23) 对象绑定与类型转换"></a>23) 对象绑定与类型转换</h3><h4 id="底层第一套转换接口与实现"><a href="#底层第一套转换接口与实现" class="headerlink" title="底层第一套转换接口与实现"></a>底层第一套转换接口与实现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line"></span><br><span class="line">Formatter --|&gt; Printer</span><br><span class="line">Formatter --|&gt; Parser</span><br><span class="line"></span><br><span class="line">class Converters &#123;</span><br><span class="line">   Set~GenericConverter~</span><br><span class="line">&#125;</span><br><span class="line">class Converter</span><br><span class="line"></span><br><span class="line">class ConversionService</span><br><span class="line">class FormattingConversionService</span><br><span class="line"></span><br><span class="line">ConversionService &lt;|-- FormattingConversionService</span><br><span class="line">FormattingConversionService o-- Converters</span><br><span class="line"></span><br><span class="line">Printer --&gt; Adapter1</span><br><span class="line">Adapter1 --&gt; Converters</span><br><span class="line">Parser --&gt; Adapter2</span><br><span class="line">Adapter2 --&gt; Converters</span><br><span class="line">Converter --&gt; Adapter3</span><br><span class="line">Adapter3 --&gt; Converters</span><br><span class="line"></span><br><span class="line">&lt;&lt;interface&gt;&gt; Formatter</span><br><span class="line">&lt;&lt;interface&gt;&gt; Printer</span><br><span class="line">&lt;&lt;interface&gt;&gt; Parser</span><br><span class="line">&lt;&lt;interface&gt;&gt; Converter</span><br><span class="line">&lt;&lt;interface&gt;&gt; ConversionService</span><br></pre></td></tr></table></figure>
<ul>
<li>Printer 把其它类型转为 String</li>
<li>Parser 把 String 转为其它类型</li>
<li>Formatter 综合 Printer 与 Parser 功能</li>
<li>Converter 把类型 S 转为类型 T</li>
<li>Printer、Parser、Converter 经过适配转换成 GenericConverter 放入 Converters 集合</li>
<li>FormattingConversionService 利用其它们实现转换</li>
</ul>
<h4 id="底层第二套转换接口"><a href="#底层第二套转换接口" class="headerlink" title="底层第二套转换接口"></a>底层第二套转换接口</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line"></span><br><span class="line">PropertyEditorRegistry o-- &quot;多&quot; PropertyEditor</span><br><span class="line"></span><br><span class="line">&lt;&lt;interface&gt;&gt; PropertyEditorRegistry</span><br><span class="line">&lt;&lt;interface&gt;&gt; PropertyEditor</span><br></pre></td></tr></table></figure>
<ul>
<li>PropertyEditor 把 String 与其它类型相互转换</li>
<li>PropertyEditorRegistry 可以注册多个 PropertyEditor 对象</li>
<li>与第一套接口直接可以通过 FormatterPropertyEditorAdapter 来进行适配</li>
</ul>
<h4 id="高层接口与实现"><a href="#高层接口与实现" class="headerlink" title="高层接口与实现"></a>高层接口与实现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">TypeConverter &lt;|-- SimpleTypeConverter</span><br><span class="line">TypeConverter &lt;|-- BeanWrapperImpl</span><br><span class="line">TypeConverter &lt;|-- DirectFieldAccessor</span><br><span class="line">TypeConverter &lt;|-- ServletRequestDataBinder</span><br><span class="line"></span><br><span class="line">SimpleTypeConverter --&gt; TypeConverterDelegate</span><br><span class="line">BeanWrapperImpl --&gt; TypeConverterDelegate</span><br><span class="line">DirectFieldAccessor --&gt; TypeConverterDelegate</span><br><span class="line">ServletRequestDataBinder --&gt; TypeConverterDelegate</span><br><span class="line"></span><br><span class="line">TypeConverterDelegate --&gt; ConversionService</span><br><span class="line">TypeConverterDelegate --&gt; PropertyEditorRegistry</span><br><span class="line"></span><br><span class="line">&lt;&lt;interface&gt;&gt; TypeConverter</span><br><span class="line">&lt;&lt;interface&gt;&gt; ConversionService</span><br><span class="line">&lt;&lt;interface&gt;&gt; PropertyEditorRegistry</span><br></pre></td></tr></table></figure>
<ul>
<li>它们都实现了 TypeConverter 这个高层转换接口，在转换时，会用到 TypeConverter Delegate 委派ConversionService 与 PropertyEditorRegistry 真正执行转换（Facade 门面模式）<ul>
<li>首先看是否有自定义转换器, @InitBinder 添加的即属于这种 (用了适配器模式把 Formatter 转为需要的 PropertyEditor)</li>
<li>再看有没有 ConversionService 转换</li>
<li>再利用默认的 PropertyEditor 转换</li>
<li>最后有一些特殊处理</li>
</ul>
</li>
<li>SimpleTypeConverter 仅做类型转换</li>
<li>BeanWrapperImpl 为 bean 的属性赋值，当需要时做类型转换，走 Property</li>
<li>DirectFieldAccessor 为 bean 的属性赋值，当需要时做类型转换，走 Field</li>
<li>ServletRequestDataBinder 为 bean 的属性执行绑定，当需要时做类型转换，根据 directFieldAccess 选择走 Property 还是 Field，具备校验与获取校验结果功能</li>
</ul>
<h4 id="演示1-类型转换与数据绑定"><a href="#演示1-类型转换与数据绑定" class="headerlink" title="演示1 - 类型转换与数据绑定"></a>演示1 - 类型转换与数据绑定</h4><h5 id="代码参考-30"><a href="#代码参考-30" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a23</strong> 包</p>
<h4 id="收获💡-35"><a href="#收获💡-35" class="headerlink" title="收获💡"></a>收获💡</h4><p>基本的类型转换与数据绑定用法</p>
<ul>
<li>SimpleTypeConverter</li>
<li>BeanWrapperImpl</li>
<li>DirectFieldAccessor</li>
<li>ServletRequestDataBinder</li>
</ul>
<h4 id="演示2-数据绑定工厂"><a href="#演示2-数据绑定工厂" class="headerlink" title="演示2 - 数据绑定工厂"></a>演示2 - 数据绑定工厂</h4><h5 id="代码参考-31"><a href="#代码参考-31" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a23.TestServletDataBinderFactory</strong></p>
<h4 id="收获💡-36"><a href="#收获💡-36" class="headerlink" title="收获💡"></a>收获💡</h4><p>ServletRequestDataBinderFactory 的用法和扩展点</p>
<ol>
<li>可以解析控制器的 @InitBinder 标注方法作为扩展点，添加自定义转换器<ul>
<li>控制器私有范围</li>
</ul>
</li>
<li>可以通过 ConfigurableWebBindingInitializer 配置 ConversionService 作为扩展点，添加自定义转换器<ul>
<li>公共范围</li>
</ul>
</li>
<li>同时加了 @InitBinder 和 ConversionService 的转换优先级<ol>
<li>优先采用 @InitBinder 的转换器</li>
<li>其次使用 ConversionService 的转换器</li>
<li>使用默认转换器</li>
<li>特殊处理（例如有参构造）</li>
</ol>
</li>
</ol>
<h4 id="演示3-获取泛型参数"><a href="#演示3-获取泛型参数" class="headerlink" title="演示3 - 获取泛型参数"></a>演示3 - 获取泛型参数</h4><h5 id="代码参考-32"><a href="#代码参考-32" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a23.sub</strong> 包</p>
<h4 id="收获💡-37"><a href="#收获💡-37" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>java api 获取泛型参数</li>
<li>spring api 获取泛型参数</li>
</ol>
<h3 id="24-ControllerAdvice-之-InitBinder"><a href="#24-ControllerAdvice-之-InitBinder" class="headerlink" title="24) @ControllerAdvice 之 @InitBinder"></a>24) @ControllerAdvice 之 @InitBinder</h3><h4 id="演示-准备-InitBinder"><a href="#演示-准备-InitBinder" class="headerlink" title="演示 - 准备 @InitBinder"></a>演示 - 准备 @InitBinder</h4><p><strong>准备 @InitBinder</strong> 在整个 HandlerAdapter 调用过程中所处的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant adapter as HandlerAdapter</span><br><span class="line">participant bf as WebDataBinderFactory</span><br><span class="line">participant mf as ModelFactory</span><br><span class="line">participant ihm as ServletInvocableHandlerMethod</span><br><span class="line">participant ar as ArgumentResolvers </span><br><span class="line">participant rh as ReturnValueHandlers</span><br><span class="line">participant container as ModelAndViewContainer</span><br><span class="line">rect rgb(200, 150, 255)</span><br><span class="line">adapter -&gt;&gt; +bf: 准备 @InitBinder</span><br><span class="line">bf --&gt;&gt; -adapter: </span><br><span class="line">end</span><br><span class="line">adapter -&gt;&gt; +mf: 准备 @ModelAttribute</span><br><span class="line">mf -&gt;&gt; +container: 添加Model数据</span><br><span class="line">container --&gt;&gt; -mf: </span><br><span class="line">mf --&gt;&gt; -adapter: </span><br><span class="line"></span><br><span class="line">adapter -&gt;&gt; +ihm: invokeAndHandle</span><br><span class="line">ihm -&gt;&gt; +ar: 获取 args</span><br><span class="line">ar -&gt;&gt; ar: 有的解析器涉及 RequestBodyAdvice</span><br><span class="line">ar -&gt;&gt; container: 有的解析器涉及数据绑定生成Model数据</span><br><span class="line">ar --&gt;&gt; -ihm: args</span><br><span class="line">ihm -&gt;&gt; ihm: method.invoke(bean,args) 得到 returnValue</span><br><span class="line">ihm -&gt;&gt; +rh: 处理 returnValue</span><br><span class="line">rh -&gt;&gt; rh: 有的处理器涉及 ResponseBodyAdvice</span><br><span class="line">rh -&gt;&gt; +container: 添加Model数据,处理视图名,是否渲染等</span><br><span class="line">container --&gt;&gt; -rh: </span><br><span class="line">rh --&gt;&gt; -ihm: </span><br><span class="line">ihm --&gt;&gt; -adapter: </span><br><span class="line">adapter -&gt;&gt; +container: 获取 ModelAndView</span><br><span class="line">container --&gt;&gt; -adapter: </span><br></pre></td></tr></table></figure>
<ul>
<li>RequestMappingHandlerAdapter 在图中缩写为 HandlerAdapter</li>
<li>HandlerMethodArgumentResolverComposite 在图中缩写为 ArgumentResolvers</li>
<li>HandlerMethodReturnValueHandlerComposite 在图中缩写为 ReturnValueHandlers</li>
</ul>
<h4 id="收获💡-38"><a href="#收获💡-38" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>RequestMappingHandlerAdapter 初始化时会解析 @ControllerAdvice 中的 @InitBinder 方法</li>
<li>RequestMappingHandlerAdapter 会以类为单位，在该类首次使用时，解析此类的 @InitBinder 方法</li>
<li>以上两种 @InitBinder 的解析结果都会缓存来避免重复解析</li>
<li>控制器方法调用时，会综合利用本类的 @InitBinder 方法和 @ControllerAdvice 中的 @InitBinder 方法创建绑定工厂</li>
</ol>
<h3 id="25-控制器方法执行流程"><a href="#25-控制器方法执行流程" class="headerlink" title="25) 控制器方法执行流程"></a>25) 控制器方法执行流程</h3><h4 id="图1"><a href="#图1" class="headerlink" title="图1"></a>图1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">class ServletInvocableHandlerMethod &#123;</span><br><span class="line">	+invokeAndHandle(ServletWebRequest,ModelAndViewContainer)</span><br><span class="line">&#125;</span><br><span class="line">HandlerMethod &lt;|-- ServletInvocableHandlerMethod</span><br><span class="line">HandlerMethod o-- bean</span><br><span class="line">HandlerMethod o-- method</span><br><span class="line">ServletInvocableHandlerMethod o-- WebDataBinderFactory</span><br><span class="line">ServletInvocableHandlerMethod o-- ParameterNameDiscoverer</span><br><span class="line">ServletInvocableHandlerMethod o-- HandlerMethodArgumentResolverComposite</span><br><span class="line">ServletInvocableHandlerMethod o-- HandlerMethodReturnValueHandlerComposite</span><br></pre></td></tr></table></figure>
<p>HandlerMethod 需要</p>
<ul>
<li>bean 即是哪个 Controller</li>
<li>method 即是 Controller 中的哪个方法</li>
</ul>
<p>ServletInvocableHandlerMethod 需要</p>
<ul>
<li>WebDataBinderFactory 负责对象绑定、类型转换</li>
<li>ParameterNameDiscoverer 负责参数名解析</li>
<li>HandlerMethodArgumentResolverComposite 负责解析参数</li>
<li>HandlerMethodReturnValueHandlerComposite 负责处理返回值</li>
</ul>
<h4 id="图2"><a href="#图2" class="headerlink" title="图2"></a>图2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant adapter as RequestMappingHandlerAdapter</span><br><span class="line">participant bf as WebDataBinderFactory</span><br><span class="line">participant mf as ModelFactory</span><br><span class="line">participant container as ModelAndViewContainer</span><br><span class="line">adapter -&gt;&gt; +bf: 准备 @InitBinder</span><br><span class="line">bf --&gt;&gt; -adapter: </span><br><span class="line">adapter -&gt;&gt; +mf: 准备 @ModelAttribute</span><br><span class="line">mf -&gt;&gt; +container: 添加Model数据</span><br><span class="line">container --&gt;&gt; -mf: </span><br><span class="line">mf --&gt;&gt; -adapter: </span><br></pre></td></tr></table></figure>
<h4 id="图3"><a href="#图3" class="headerlink" title="图3"></a>图3</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant adapter as RequestMappingHandlerAdapter</span><br><span class="line">participant ihm as ServletInvocableHandlerMethod</span><br><span class="line">participant ar as ArgumentResolvers</span><br><span class="line">participant rh as ReturnValueHandlers</span><br><span class="line">participant container as ModelAndViewContainer</span><br><span class="line"></span><br><span class="line">adapter -&gt;&gt; +ihm: invokeAndHandle</span><br><span class="line">ihm -&gt;&gt; +ar: 获取 args</span><br><span class="line">ar -&gt;&gt; ar: 有的解析器涉及 RequestBodyAdvice</span><br><span class="line">ar -&gt;&gt; container: 有的解析器涉及数据绑定生成模型数据</span><br><span class="line">container --&gt;&gt; ar: </span><br><span class="line">ar --&gt;&gt; -ihm: args</span><br><span class="line">ihm -&gt;&gt; ihm: method.invoke(bean,args) 得到 returnValue</span><br><span class="line">ihm -&gt;&gt; +rh: 处理 returnValue</span><br><span class="line">rh -&gt;&gt; rh: 有的处理器涉及 ResponseBodyAdvice</span><br><span class="line">rh -&gt;&gt; +container: 添加Model数据,处理视图名,是否渲染等</span><br><span class="line">container --&gt;&gt; -rh: </span><br><span class="line">rh --&gt;&gt; -ihm: </span><br><span class="line">ihm --&gt;&gt; -adapter: </span><br><span class="line">adapter -&gt;&gt; +container: 获取 ModelAndView</span><br><span class="line">container --&gt;&gt; -adapter: </span><br></pre></td></tr></table></figure>
<h3 id="26-ControllerAdvice-之-ModelAttribute"><a href="#26-ControllerAdvice-之-ModelAttribute" class="headerlink" title="26) @ControllerAdvice 之 @ModelAttribute"></a>26) @ControllerAdvice 之 @ModelAttribute</h3><h4 id="演示-准备-ModelAttribute"><a href="#演示-准备-ModelAttribute" class="headerlink" title="演示 - 准备 @ModelAttribute"></a>演示 - 准备 @ModelAttribute</h4><h5 id="代码参考-33"><a href="#代码参考-33" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a26</strong> 包</p>
<p><strong>准备 @ModelAttribute</strong> 在整个 HandlerAdapter 调用过程中所处的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant adapter as HandlerAdapter</span><br><span class="line">participant bf as WebDataBinderFactory</span><br><span class="line">participant mf as ModelFactory</span><br><span class="line">participant ihm as ServletInvocableHandlerMethod</span><br><span class="line">participant ar as ArgumentResolvers </span><br><span class="line">participant rh as ReturnValueHandlers</span><br><span class="line">participant container as ModelAndViewContainer</span><br><span class="line"></span><br><span class="line">adapter -&gt;&gt; +bf: 准备 @InitBinder</span><br><span class="line">bf --&gt;&gt; -adapter: </span><br><span class="line">rect rgb(200, 150, 255)</span><br><span class="line">adapter -&gt;&gt; +mf: 准备 @ModelAttribute</span><br><span class="line">mf -&gt;&gt; +container: 添加Model数据</span><br><span class="line">container --&gt;&gt; -mf: </span><br><span class="line">mf --&gt;&gt; -adapter: </span><br><span class="line">end</span><br><span class="line">adapter -&gt;&gt; +ihm: invokeAndHandle</span><br><span class="line">ihm -&gt;&gt; +ar: 获取 args</span><br><span class="line">ar -&gt;&gt; ar: 有的解析器涉及 RequestBodyAdvice</span><br><span class="line">ar -&gt;&gt; container: 有的解析器涉及数据绑定生成Model数据</span><br><span class="line">ar --&gt;&gt; -ihm: args</span><br><span class="line">ihm -&gt;&gt; ihm: method.invoke(bean,args) 得到 returnValue</span><br><span class="line">ihm -&gt;&gt; +rh: 处理 returnValue</span><br><span class="line">rh -&gt;&gt; rh: 有的处理器涉及 ResponseBodyAdvice</span><br><span class="line">rh -&gt;&gt; +container: 添加Model数据,处理视图名,是否渲染等</span><br><span class="line">container --&gt;&gt; -rh: </span><br><span class="line">rh --&gt;&gt; -ihm: </span><br><span class="line">ihm --&gt;&gt; -adapter: </span><br><span class="line">adapter -&gt;&gt; +container: 获取 ModelAndView</span><br><span class="line">container --&gt;&gt; -adapter: </span><br></pre></td></tr></table></figure>
<h4 id="收获💡-39"><a href="#收获💡-39" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>RequestMappingHandlerAdapter 初始化时会解析 @ControllerAdvice 中的 @ModelAttribute 方法</li>
<li>RequestMappingHandlerAdapter 会以类为单位，在该类首次使用时，解析此类的 @ModelAttribute 方法</li>
<li>以上两种 @ModelAttribute 的解析结果都会缓存来避免重复解析</li>
<li>控制器方法调用时，会综合利用本类的 @ModelAttribute 方法和 @ControllerAdvice 中的 @ModelAttribute 方法创建模型工厂</li>
</ol>
<h3 id="27-返回值处理器"><a href="#27-返回值处理器" class="headerlink" title="27) 返回值处理器"></a>27) 返回值处理器</h3><h4 id="演示-常见返回值处理器"><a href="#演示-常见返回值处理器" class="headerlink" title="演示 - 常见返回值处理器"></a>演示 - 常见返回值处理器</h4><h5 id="代码参考-34"><a href="#代码参考-34" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a27</strong> 包</p>
<h4 id="收获💡-40"><a href="#收获💡-40" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>常见的返回值处理器<ul>
<li>ModelAndView，分别获取其模型和视图名，放入 ModelAndViewContainer</li>
<li>返回值类型为 String 时，把它当做视图名，放入 ModelAndViewContainer</li>
<li>返回值添加了 @ModelAttribute 注解时，将返回值作为模型，放入 ModelAndViewContainer<ul>
<li>此时需找到默认视图名</li>
</ul>
</li>
<li>返回值省略 @ModelAttribute 注解且返回非简单类型时，将返回值作为模型，放入 ModelAndViewContainer<ul>
<li>此时需找到默认视图名</li>
</ul>
</li>
<li>返回值类型为 ResponseEntity 时<ul>
<li>此时走 MessageConverter，并设置 ModelAndViewContainer.requestHandled 为 true</li>
</ul>
</li>
<li>返回值类型为 HttpHeaders 时<ul>
<li>会设置 ModelAndViewContainer.requestHandled 为 true</li>
</ul>
</li>
<li>返回值添加了 @ResponseBody 注解时<ul>
<li>此时走 MessageConverter，并设置 ModelAndViewContainer.requestHandled 为 true</li>
</ul>
</li>
</ul>
</li>
<li>组合模式在 Spring 中的体现 + 1</li>
</ol>
<h3 id="28-MessageConverter"><a href="#28-MessageConverter" class="headerlink" title="28) MessageConverter"></a>28) MessageConverter</h3><h4 id="演示-MessageConverter-的作用"><a href="#演示-MessageConverter-的作用" class="headerlink" title="演示 - MessageConverter 的作用"></a>演示 - MessageConverter 的作用</h4><h5 id="代码参考-35"><a href="#代码参考-35" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a28.A28</strong></p>
<h4 id="收获💡-41"><a href="#收获💡-41" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>MessageConverter 的作用<ul>
<li>@ResponseBody 是返回值处理器解析的</li>
<li>但具体转换工作是 MessageConverter 做的</li>
</ul>
</li>
<li>如何选择 MediaType<ul>
<li>首先看 @RequestMapping 上有没有指定</li>
<li>其次看 request 的 Accept 头有没有指定</li>
<li>最后按 MessageConverter 的顺序, 谁能谁先转换</li>
</ul>
</li>
</ol>
<h3 id="29-ControllerAdvice-之-ResponseBodyAdvice"><a href="#29-ControllerAdvice-之-ResponseBodyAdvice" class="headerlink" title="29) @ControllerAdvice 之 ResponseBodyAdvice"></a>29) @ControllerAdvice 之 ResponseBodyAdvice</h3><h4 id="演示-ResponseBodyAdvice-增强"><a href="#演示-ResponseBodyAdvice-增强" class="headerlink" title="演示 - ResponseBodyAdvice 增强"></a>演示 - ResponseBodyAdvice 增强</h4><h5 id="代码参考-36"><a href="#代码参考-36" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a29</strong> 包</p>
<p><strong>ResponseBodyAdvice 增强</strong> 在整个 HandlerAdapter 调用过程中所处的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant adapter as HandlerAdapter</span><br><span class="line">participant bf as WebDataBinderFactory</span><br><span class="line">participant mf as ModelFactory</span><br><span class="line">participant ihm as ServletInvocableHandlerMethod</span><br><span class="line">participant ar as ArgumentResolvers </span><br><span class="line">participant rh as ReturnValueHandlers</span><br><span class="line">participant container as ModelAndViewContainer</span><br><span class="line"></span><br><span class="line">adapter -&gt;&gt; +bf: 准备 @InitBinder</span><br><span class="line">bf --&gt;&gt; -adapter: </span><br><span class="line">adapter -&gt;&gt; +mf: 准备 @ModelAttribute</span><br><span class="line">mf -&gt;&gt; +container: 添加Model数据</span><br><span class="line">container --&gt;&gt; -mf: </span><br><span class="line">mf --&gt;&gt; -adapter: </span><br><span class="line">adapter -&gt;&gt; +ihm: invokeAndHandle</span><br><span class="line">ihm -&gt;&gt; +ar: 获取 args</span><br><span class="line">ar -&gt;&gt; ar: 有的解析器涉及 RequestBodyAdvice</span><br><span class="line">ar -&gt;&gt; container: 有的解析器涉及数据绑定生成Model数据</span><br><span class="line">ar --&gt;&gt; -ihm: args</span><br><span class="line">ihm -&gt;&gt; ihm: method.invoke(bean,args) 得到 returnValue</span><br><span class="line">ihm -&gt;&gt; +rh: 处理 returnValue</span><br><span class="line">rect rgb(200, 150, 255)</span><br><span class="line">rh -&gt;&gt; rh: 有的处理器涉及 ResponseBodyAdvice</span><br><span class="line">end</span><br><span class="line">rh -&gt;&gt; +container: 添加Model数据,处理视图名,是否渲染等</span><br><span class="line">container --&gt;&gt; -rh: </span><br><span class="line">rh --&gt;&gt; -ihm: </span><br><span class="line">ihm --&gt;&gt; -adapter: </span><br><span class="line">adapter -&gt;&gt; +container: 获取 ModelAndView</span><br><span class="line">container --&gt;&gt; -adapter: </span><br></pre></td></tr></table></figure>
<h4 id="收获💡-42"><a href="#收获💡-42" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>ResponseBodyAdvice 返回响应体前包装</li>
</ol>
<h3 id="30-异常解析器"><a href="#30-异常解析器" class="headerlink" title="30) 异常解析器"></a>30) 异常解析器</h3><h4 id="演示-ExceptionHandlerExceptionResolver"><a href="#演示-ExceptionHandlerExceptionResolver" class="headerlink" title="演示 - ExceptionHandlerExceptionResolver"></a>演示 - ExceptionHandlerExceptionResolver</h4><h5 id="代码参考-37"><a href="#代码参考-37" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a30.A30</strong></p>
<h4 id="收获💡-43"><a href="#收获💡-43" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>它能够重用参数解析器、返回值处理器，实现组件重用</li>
<li>它能够支持嵌套异常</li>
</ol>
<h3 id="31-ControllerAdvice-之-ExceptionHandler"><a href="#31-ControllerAdvice-之-ExceptionHandler" class="headerlink" title="31) @ControllerAdvice 之 @ExceptionHandler"></a>31) @ControllerAdvice 之 @ExceptionHandler</h3><h4 id="演示-准备-ExceptionHandler"><a href="#演示-准备-ExceptionHandler" class="headerlink" title="演示 - 准备 @ExceptionHandler"></a>演示 - 准备 @ExceptionHandler</h4><h5 id="代码参考-38"><a href="#代码参考-38" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a31</strong> 包</p>
<h4 id="收获💡-44"><a href="#收获💡-44" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>ExceptionHandlerExceptionResolver 初始化时会解析 @ControllerAdvice 中的 @ExceptionHandler 方法</li>
<li>ExceptionHandlerExceptionResolver 会以类为单位，在该类首次处理异常时，解析此类的 @ExceptionHandler 方法</li>
<li>以上两种 @ExceptionHandler 的解析结果都会缓存来避免重复解析</li>
</ol>
<h3 id="32-Tomcat-异常处理"><a href="#32-Tomcat-异常处理" class="headerlink" title="32) Tomcat 异常处理"></a>32) Tomcat 异常处理</h3><ul>
<li><p>我们知道 @ExceptionHandler 只能处理发生在 mvc 流程中的异常，例如控制器内、拦截器内，那么如果是 Filter 出现了异常，如何进行处理呢？</p>
</li>
<li><p>在 Spring Boot 中，是这么实现的：</p>
<ol>
<li>因为内嵌了 Tomcat 容器，因此可以配置 Tomcat 的错误页面，Filter 与 错误页面之间是通过请求转发跳转的，可以在这里做手脚</li>
<li>先通过 ErrorPageRegistrarBeanPostProcessor 这个后处理器配置错误页面地址，默认为 <code>/error</code> 也可以通过 <code>$&#123;server.error.path&#125;</code> 进行配置</li>
<li>当 Filter 发生异常时，不会走 Spring 流程，但会走 Tomcat 的错误处理，于是就希望转发至 <code>/error</code> 这个地址<ul>
<li>当然，如果没有 @ExceptionHandler，那么最终也会走到 Tomcat 的错误处理</li>
</ul>
</li>
<li>Spring Boot 又提供了一个 BasicErrorController，它就是一个标准 @Controller，@RequestMapping 配置为 <code>/error</code>，所以处理异常的职责就又回到了 Spring</li>
<li>异常信息由于会被 Tomcat 放入 request 作用域，因此 BasicErrorController 里也能获取到</li>
<li>具体异常信息会由 DefaultErrorAttributes 封装好</li>
<li>BasicErrorController 通过 Accept 头判断需要生成哪种 MediaType 的响应<ul>
<li>如果要的不是 text/html，走 MessageConverter 流程</li>
<li>如果需要 text/html，走 mvc 流程，此时又分两种情况<ul>
<li>配置了 ErrorViewResolver，根据状态码去找 View</li>
<li>没配置或没找到，用 BeanNameViewResolver 根据一个固定为 error 的名字找到 View，即所谓的 WhitelabelErrorView</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<blockquote>
<p><strong><em>评价</em></strong></p>
<ul>
<li>一个错误处理搞得这么复杂，就问恶心不？</li>
</ul>
</blockquote>
<h4 id="演示1-错误页处理"><a href="#演示1-错误页处理" class="headerlink" title="演示1 - 错误页处理"></a>演示1 - 错误页处理</h4><h5 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">// ⬅️修改了 Tomcat 服务器默认错误地址, 出错时使用请求转发方式跳转</span></span><br><span class="line"><span class="keyword">public</span> ErrorPageRegistrar <span class="title function_">errorPageRegistrar</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> webServerFactory -&gt; webServerFactory.addErrorPages(<span class="keyword">new</span> <span class="title class_">ErrorPage</span>(<span class="string">&quot;/error&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">// ⬅️TomcatServletWebServerFactory 初始化前用它增强, 注册所有 ErrorPageRegistrar</span></span><br><span class="line"><span class="keyword">public</span> ErrorPageRegistrarBeanPostProcessor <span class="title function_">errorPageRegistrarBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorPageRegistrarBeanPostProcessor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="收获💡-45"><a href="#收获💡-45" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>Tomcat 的错误页处理手段</li>
</ol>
<h4 id="演示2-BasicErrorController"><a href="#演示2-BasicErrorController" class="headerlink" title="演示2 - BasicErrorController"></a>演示2 - BasicErrorController</h4><h5 id="关键代码-2"><a href="#关键代码-2" class="headerlink" title="关键代码"></a>关键代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">// ⬅️ErrorProperties 封装环境键值, ErrorAttributes 控制有哪些错误信息</span></span><br><span class="line"><span class="keyword">public</span> BasicErrorController <span class="title function_">basicErrorController</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ErrorProperties</span> <span class="variable">errorProperties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorProperties</span>();</span><br><span class="line">    errorProperties.setIncludeException(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BasicErrorController</span>(<span class="keyword">new</span> <span class="title class_">DefaultErrorAttributes</span>(), errorProperties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">// ⬅️名称为 error 的视图, 作为 BasicErrorController 的 text/html 响应结果</span></span><br><span class="line"><span class="keyword">public</span> View <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">View</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(</span></span><br><span class="line"><span class="params">            Map&lt;String, ?&gt; model, </span></span><br><span class="line"><span class="params">            HttpServletRequest request, </span></span><br><span class="line"><span class="params">            HttpServletResponse response</span></span><br><span class="line"><span class="params">        )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(model);</span><br><span class="line">            response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().print(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                    &lt;h3&gt;服务器内部错误&lt;/h3&gt;</span></span><br><span class="line"><span class="string">                    &quot;&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">// ⬅️收集容器中所有 View 对象, bean 的名字作为视图名</span></span><br><span class="line"><span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanNameViewResolver</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="收获💡-46"><a href="#收获💡-46" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>Spring Boot 中 BasicErrorController 如何工作</li>
</ol>
<h3 id="33-BeanNameUrlHandlerMapping-与-SimpleControllerHandlerAdapter"><a href="#33-BeanNameUrlHandlerMapping-与-SimpleControllerHandlerAdapter" class="headerlink" title="33) BeanNameUrlHandlerMapping 与 SimpleControllerHandlerAdapter"></a>33) BeanNameUrlHandlerMapping 与 SimpleControllerHandlerAdapter</h3><h4 id="演示-本组映射器和适配器"><a href="#演示-本组映射器和适配器" class="headerlink" title="演示 - 本组映射器和适配器"></a>演示 - 本组映射器和适配器</h4><h5 id="关键代码-3"><a href="#关键代码-3" class="headerlink" title="关键代码"></a>关键代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> BeanNameUrlHandlerMapping <span class="title function_">beanNameUrlHandlerMapping</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanNameUrlHandlerMapping</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SimpleControllerHandlerAdapter <span class="title function_">simpleControllerHandlerAdapter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleControllerHandlerAdapter</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;/c3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Controller <span class="title function_">controller3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (request, response) -&gt; &#123;</span><br><span class="line">        response.getWriter().print(<span class="string">&quot;this is c3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="收获💡-47"><a href="#收获💡-47" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>BeanNameUrlHandlerMapping，以 / 开头的 bean 的名字会被当作映射路径</li>
<li>这些 bean 本身当作 handler，要求实现 Controller 接口</li>
<li>SimpleControllerHandlerAdapter，调用 handler</li>
<li>模拟实现这组映射器和适配器</li>
</ol>
<h3 id="34-RouterFunctionMapping-与-HandlerFunctionAdapter"><a href="#34-RouterFunctionMapping-与-HandlerFunctionAdapter" class="headerlink" title="34) RouterFunctionMapping 与 HandlerFunctionAdapter"></a>34) RouterFunctionMapping 与 HandlerFunctionAdapter</h3><h4 id="演示-本组映射器和适配器-1"><a href="#演示-本组映射器和适配器-1" class="headerlink" title="演示 - 本组映射器和适配器"></a>演示 - 本组映射器和适配器</h4><h5 id="关键代码-4"><a href="#关键代码-4" class="headerlink" title="关键代码"></a>关键代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouterFunctionMapping <span class="title function_">routerFunctionMapping</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RouterFunctionMapping</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> HandlerFunctionAdapter <span class="title function_">handlerFunctionAdapter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HandlerFunctionAdapter</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">r1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//           ⬇️映射条件   ⬇️handler</span></span><br><span class="line">    <span class="keyword">return</span> route(GET(<span class="string">&quot;/r1&quot;</span>), request -&gt; ok().body(<span class="string">&quot;this is r1&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="收获💡-48"><a href="#收获💡-48" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>RouterFunctionMapping, 通过 RequestPredicate 条件映射</li>
<li>handler 要实现 HandlerFunction 接口</li>
<li>HandlerFunctionAdapter, 调用 handler</li>
</ol>
<h3 id="35-SimpleUrlHandlerMapping-与-HttpRequestHandlerAdapter"><a href="#35-SimpleUrlHandlerMapping-与-HttpRequestHandlerAdapter" class="headerlink" title="35) SimpleUrlHandlerMapping 与 HttpRequestHandlerAdapter"></a>35) SimpleUrlHandlerMapping 与 HttpRequestHandlerAdapter</h3><h4 id="演示1-本组映射器和适配器"><a href="#演示1-本组映射器和适配器" class="headerlink" title="演示1 - 本组映射器和适配器"></a>演示1 - 本组映射器和适配器</h4><h5 id="代码参考-39"><a href="#代码参考-39" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>org.springframework.boot.autoconfigure.web.servlet.A35</strong></p>
<h5 id="关键代码-5"><a href="#关键代码-5" class="headerlink" title="关键代码"></a>关键代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title function_">simpleUrlHandlerMapping</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">    <span class="type">SimpleUrlHandlerMapping</span> <span class="variable">handlerMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleUrlHandlerMapping</span>();</span><br><span class="line">    Map&lt;String, ResourceHttpRequestHandler&gt; map </span><br><span class="line">        = context.getBeansOfType(ResourceHttpRequestHandler.class);</span><br><span class="line">    handlerMapping.setUrlMap(map);</span><br><span class="line">    <span class="keyword">return</span> handlerMapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> HttpRequestHandlerAdapter <span class="title function_">httpRequestHandlerAdapter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpRequestHandlerAdapter</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;/**&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title function_">handler1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ResourceHttpRequestHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceHttpRequestHandler</span>();</span><br><span class="line">    handler.setLocations(List.of(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;static/&quot;</span>)));</span><br><span class="line">    <span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;/img/**&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title function_">handler2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ResourceHttpRequestHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceHttpRequestHandler</span>();</span><br><span class="line">    handler.setLocations(List.of(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;images/&quot;</span>)));</span><br><span class="line">    <span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="收获💡-49"><a href="#收获💡-49" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>SimpleUrlHandlerMapping 不会在初始化时收集映射信息，需要手动收集</li>
<li>SimpleUrlHandlerMapping 映射路径</li>
<li>ResourceHttpRequestHandler 作为静态资源 handler</li>
<li>HttpRequestHandlerAdapter, 调用此 handler</li>
</ol>
<h4 id="演示2-静态资源解析优化"><a href="#演示2-静态资源解析优化" class="headerlink" title="演示2 - 静态资源解析优化"></a>演示2 - 静态资源解析优化</h4><h5 id="关键代码-6"><a href="#关键代码-6" class="headerlink" title="关键代码"></a>关键代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;/**&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title function_">handler1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ResourceHttpRequestHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceHttpRequestHandler</span>();</span><br><span class="line">    handler.setLocations(List.of(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;static/&quot;</span>)));</span><br><span class="line">    handler.setResourceResolvers(List.of(</span><br><span class="line">        	<span class="comment">// ⬇️缓存优化</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CachingResourceResolver</span>(<span class="keyword">new</span> <span class="title class_">ConcurrentMapCache</span>(<span class="string">&quot;cache1&quot;</span>)),</span><br><span class="line">        	<span class="comment">// ⬇️压缩优化</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">EncodedResourceResolver</span>(),</span><br><span class="line">        	<span class="comment">// ⬇️原始资源解析</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">PathResourceResolver</span>()</span><br><span class="line">    ));</span><br><span class="line">    <span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="收获💡-50"><a href="#收获💡-50" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>责任链模式体现</li>
<li>压缩文件需要手动生成</li>
</ol>
<h4 id="演示3-欢迎页"><a href="#演示3-欢迎页" class="headerlink" title="演示3 - 欢迎页"></a>演示3 - 欢迎页</h4><h5 id="关键代码-7"><a href="#关键代码-7" class="headerlink" title="关键代码"></a>关键代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title function_">welcomePageHandlerMapping</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">    <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> context.getResource(<span class="string">&quot;classpath:static/index.html&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WelcomePageHandlerMapping</span>(<span class="literal">null</span>, context, resource, <span class="string">&quot;/**&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SimpleControllerHandlerAdapter <span class="title function_">simpleControllerHandlerAdapter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleControllerHandlerAdapter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="收获💡-51"><a href="#收获💡-51" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>欢迎页支持静态欢迎页与动态欢迎页</li>
<li>WelcomePageHandlerMapping 映射欢迎页（即只映射 ‘/‘）<ul>
<li>它内置的 handler ParameterizableViewController 作用是不执行逻辑，仅根据视图名找视图</li>
<li>视图名固定为 forward:index.html</li>
</ul>
</li>
<li>SimpleControllerHandlerAdapter, 调用 handler<ul>
<li>转发至 /index.html</li>
<li>处理 /index.html 又会走上面的静态资源处理流程</li>
</ul>
</li>
</ol>
<h4 id="映射器与适配器小结"><a href="#映射器与适配器小结" class="headerlink" title="映射器与适配器小结"></a>映射器与适配器小结</h4><ol>
<li>HandlerMapping 负责建立请求与控制器之间的映射关系<ul>
<li>RequestMappingHandlerMapping (与 @RequestMapping 匹配)</li>
<li>WelcomePageHandlerMapping    (/)</li>
<li>BeanNameUrlHandlerMapping    (与 bean 的名字匹配 以 / 开头)</li>
<li>RouterFunctionMapping        (函数式 RequestPredicate, HandlerFunction)</li>
<li>SimpleUrlHandlerMapping      (静态资源 通配符 /<strong> /img/</strong>)</li>
<li>之间也会有顺序问题, boot 中默认顺序如上</li>
</ul>
</li>
<li>HandlerAdapter 负责实现对各种各样的 handler 的适配调用<ul>
<li>RequestMappingHandlerAdapter 处理：@RequestMapping 方法<ul>
<li>参数解析器、返回值处理器体现了组合模式</li>
</ul>
</li>
<li>SimpleControllerHandlerAdapter 处理：Controller 接口</li>
<li>HandlerFunctionAdapter 处理：HandlerFunction 函数式接口</li>
<li>HttpRequestHandlerAdapter 处理：HttpRequestHandler 接口 (静态资源处理)</li>
<li>这也是典型适配器模式体现</li>
</ul>
</li>
</ol>
<h3 id="36-mvc-处理流程"><a href="#36-mvc-处理流程" class="headerlink" title="36) mvc 处理流程"></a>36) mvc 处理流程</h3><p>当浏览器发送一个请求 <code>http://localhost:8080/hello</code> 后，请求到达服务器，其处理流程是：</p>
<ol>
<li><p>服务器提供了 DispatcherServlet，它使用的是标准 Servlet 技术</p>
<ul>
<li>路径：默认映射路径为 <code>/</code>，即会匹配到所有请求 URL，可作为请求的统一入口，也被称之为<strong>前控制器</strong><ul>
<li>jsp 不会匹配到 DispatcherServlet</li>
<li>其它有路径的 Servlet 匹配优先级也高于 DispatcherServlet</li>
</ul>
</li>
<li>创建：在 Boot 中，由 DispatcherServletAutoConfiguration 这个自动配置类提供 DispatcherServlet 的 bean</li>
<li>初始化：DispatcherServlet 初始化时会优先到容器里寻找各种组件，作为它的成员变量<ul>
<li>HandlerMapping，初始化时记录映射关系</li>
<li>HandlerAdapter，初始化时准备参数解析器、返回值处理器、消息转换器</li>
<li>HandlerExceptionResolver，初始化时准备参数解析器、返回值处理器、消息转换器</li>
<li>ViewResolver</li>
</ul>
</li>
</ul>
</li>
<li><p>DispatcherServlet 会利用 RequestMappingHandlerMapping 查找控制器方法</p>
<ul>
<li><p>例如根据 /hello 路径找到 @RequestMapping(“/hello”) 对应的控制器方法</p>
</li>
<li><p>控制器方法会被封装为 HandlerMethod 对象，并结合匹配到的拦截器一起返回给 DispatcherServlet </p>
</li>
<li><p>HandlerMethod 和拦截器合在一起称为 HandlerExecutionChain（调用链）对象</p>
</li>
</ul>
</li>
<li><p>DispatcherServlet 接下来会：</p>
<ol>
<li>调用拦截器的 preHandle 方法</li>
<li>RequestMappingHandlerAdapter 调用 handle 方法，准备数据绑定工厂、模型工厂、ModelAndViewContainer、将 HandlerMethod 完善为 ServletInvocableHandlerMethod<ul>
<li>@ControllerAdvice 全局增强点1️⃣：补充模型数据</li>
<li>@ControllerAdvice 全局增强点2️⃣：补充自定义类型转换器</li>
<li>使用 HandlerMethodArgumentResolver 准备参数<ul>
<li>@ControllerAdvice 全局增强点3️⃣：RequestBody 增强</li>
</ul>
</li>
<li>调用 ServletInvocableHandlerMethod </li>
<li>使用 HandlerMethodReturnValueHandler 处理返回值<ul>
<li>@ControllerAdvice 全局增强点4️⃣：ResponseBody 增强</li>
</ul>
</li>
<li>根据 ModelAndViewContainer 获取 ModelAndView<ul>
<li>如果返回的 ModelAndView 为 null，不走第 4 步视图解析及渲染流程<ul>
<li>例如，有的返回值处理器调用了 HttpMessageConverter 来将结果转换为 JSON，这时 ModelAndView 就为 null</li>
</ul>
</li>
<li>如果返回的 ModelAndView 不为 null，会在第 4 步走视图解析及渲染流程</li>
</ul>
</li>
</ul>
</li>
<li>调用拦截器的 postHandle 方法</li>
<li>处理异常或视图渲染<ul>
<li>如果 1~3 出现异常，走 ExceptionHandlerExceptionResolver 处理异常流程<ul>
<li>@ControllerAdvice 全局增强点5️⃣：@ExceptionHandler 异常处理</li>
</ul>
</li>
<li>正常，走视图解析及渲染流程</li>
</ul>
</li>
<li>调用拦截器的 afterCompletion 方法</li>
</ol>
</li>
</ol>
<h2 id="Boot"><a href="#Boot" class="headerlink" title="Boot"></a>Boot</h2><h3 id="37-Boot-骨架项目"><a href="#37-Boot-骨架项目" class="headerlink" title="37) Boot 骨架项目"></a>37) Boot 骨架项目</h3><p>如果是 linux 环境，用以下命令即可获取 spring boot 的骨架 pom.xml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -G https://start.spring.io/pom.xml -d dependencies=web,mysql,mybatis -o pom.xml</span><br></pre></td></tr></table></figure>
<p>也可以使用 Postman 等工具实现</p>
<p>若想获取更多用法，请参考</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://start.spring.io</span><br></pre></td></tr></table></figure>
<h3 id="38-Boot-War项目"><a href="#38-Boot-War项目" class="headerlink" title="38) Boot War项目"></a>38) Boot War项目</h3><p>步骤1：创建模块，区别在于打包方式选择 war</p>
<p><img src="img/image-20211021160145072.png" alt="image-20211021160145072" style="zoom: 50%;" /></p>
<p>接下来勾选 Spring Web 支持</p>
<p><img src="img/image-20211021162416525.png" alt="image-20211021162416525" style="zoom:50%;" /></p>
<p>步骤2：编写控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">abc</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入了控制器&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>步骤3：编写 jsp 视图，新建 webapp 目录和一个 hello.jsp 文件，注意文件名与控制器方法返回的视图逻辑名一致</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">	|- main</span><br><span class="line">		|- java</span><br><span class="line">		|- resources</span><br><span class="line">		|- webapp</span><br><span class="line">			|- hello.jsp</span><br></pre></td></tr></table></figure>
<p>步骤4：配置视图路径，打开 application.properties 文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.mvc.view.prefix</span>=<span class="string">/</span></span><br><span class="line"><span class="attr">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>将来 prefix + 控制器方法返回值 + suffix 即为视图完整路径</p>
</blockquote>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>如果用 mvn 插件 <code>mvn spring-boot:run</code> 或 main 方法测试</p>
<ul>
<li>必须添加如下依赖，因为此时用的还是内嵌 tomcat，而内嵌 tomcat 默认不带 jasper（用来解析 jsp）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以使用 Idea 配置 tomcat 来测试，此时用的是外置 tomcat</p>
<ul>
<li>骨架生成的代码中，多了一个 ServletInitializer，它的作用就是配置外置 Tomcat 使用的，在外置 Tomcat 启动后，去调用它创建和运行 SpringApplication</li>
</ul>
<h4 id="启示"><a href="#启示" class="headerlink" title="启示"></a>启示</h4><p>对于 jar 项目，若要支持 jsp，也可以在加入 jasper 依赖的前提下，把 jsp 文件置入 <code>META-INF/resources</code> </p>
<h3 id="39-Boot-启动过程"><a href="#39-Boot-启动过程" class="headerlink" title="39) Boot 启动过程"></a>39) Boot 启动过程</h3><p>阶段一：SpringApplication 构造</p>
<ol>
<li>记录 BeanDefinition 源</li>
<li>推断应用类型</li>
<li>记录 ApplicationContext 初始化器</li>
<li>记录监听器</li>
<li>推断主启动类</li>
</ol>
<p>阶段二：执行 run 方法</p>
<ol>
<li><p>得到 SpringApplicationRunListeners，名字取得不好，实际是事件发布器</p>
<ul>
<li>发布 application starting 事件1️⃣</li>
</ul>
</li>
<li><p>封装启动 args</p>
</li>
<li><p>准备 Environment 添加命令行参数（*）</p>
</li>
<li><p>ConfigurationPropertySources 处理（*）</p>
<ul>
<li>发布 application environment 已准备事件2️⃣</li>
</ul>
</li>
<li><p>通过 EnvironmentPostProcessorApplicationListener 进行 env 后处理（*）</p>
<ul>
<li>application.properties，由 StandardConfigDataLocationResolver 解析</li>
<li>spring.application.json</li>
</ul>
</li>
<li><p>绑定 spring.main 到 SpringApplication 对象（*）</p>
</li>
<li><p>打印 banner（*）</p>
</li>
<li><p>创建容器</p>
</li>
<li><p>准备容器</p>
<ul>
<li>发布 application context 已初始化事件3️⃣</li>
</ul>
</li>
<li><p>加载 bean 定义</p>
<ul>
<li>发布 application prepared 事件4️⃣</li>
</ul>
</li>
<li><p>refresh 容器</p>
<ul>
<li>发布 application started 事件5️⃣</li>
</ul>
</li>
<li><p>执行 runner</p>
<ul>
<li><p>发布 application ready 事件6️⃣</p>
</li>
<li><p>这其中有异常，发布 application failed 事件7️⃣</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>带 * 的有独立的示例</p>
</blockquote>
<h4 id="演示-启动过程"><a href="#演示-启动过程" class="headerlink" title="演示 - 启动过程"></a>演示 - 启动过程</h4><p><strong>com.itheima.a39.A39_1</strong> 对应 SpringApplication 构造</p>
<p><strong>com.itheima.a39.A39_2</strong> 对应第1步，并演示 7 个事件</p>
<p><strong>com.itheima.a39.A39_3</strong> 对应第2、8到12步</p>
<p><strong>org.springframework.boot.Step3</strong></p>
<p><strong>org.springframework.boot.Step4</strong></p>
<p><strong>org.springframework.boot.Step5</strong></p>
<p><strong>org.springframework.boot.Step6</strong></p>
<p><strong>org.springframework.boot.Step7</strong></p>
<h4 id="收获💡-52"><a href="#收获💡-52" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>SpringApplication 构造方法中所做的操作<ul>
<li>可以有多种源用来加载 bean 定义</li>
<li>应用类型推断</li>
<li>添加容器初始化器</li>
<li>添加监听器</li>
<li>演示主类推断</li>
</ul>
</li>
<li>如何读取 spring.factories 中的配置</li>
<li>从配置中获取重要的事件发布器：SpringApplicationRunListeners</li>
<li>容器的创建、初始化器增强、加载 bean 定义等</li>
<li>CommandLineRunner、ApplicationRunner 的作用</li>
<li>环境对象<ol>
<li>命令行 PropertySource</li>
<li>ConfigurationPropertySources 规范环境键名称</li>
<li>EnvironmentPostProcessor 后处理增强<ul>
<li>由 EventPublishingRunListener 通过监听事件2️⃣来调用</li>
</ul>
</li>
<li>绑定 spring.main 前缀的 key value 至 SpringApplication</li>
</ol>
</li>
<li>Banner </li>
</ol>
<h3 id="40-Tomcat-内嵌容器"><a href="#40-Tomcat-内嵌容器" class="headerlink" title="40) Tomcat 内嵌容器"></a>40) Tomcat 内嵌容器</h3><p>Tomcat 基本结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server</span><br><span class="line">└───Service</span><br><span class="line">    ├───Connector (协议, 端口)</span><br><span class="line">    └───Engine</span><br><span class="line">        └───Host(虚拟主机 localhost)</span><br><span class="line">            ├───Context1 (应用1, 可以设置虚拟路径, / 即 url 起始路径; 项目磁盘路径, 即 docBase )</span><br><span class="line">            │   │   index.html</span><br><span class="line">            │   └───WEB-INF</span><br><span class="line">            │       │   web.xml (servlet, filter, listener) 3.0</span><br><span class="line">            │       ├───classes (servlet, controller, service ...)</span><br><span class="line">            │       ├───jsp</span><br><span class="line">            │       └───lib (第三方 jar 包)</span><br><span class="line">            └───Context2 (应用2)</span><br><span class="line">                │   index.html</span><br><span class="line">                └───WEB-INF</span><br><span class="line">                        web.xml</span><br></pre></td></tr></table></figure>
<h4 id="演示1-Tomcat-内嵌容器"><a href="#演示1-Tomcat-内嵌容器" class="headerlink" title="演示1 - Tomcat 内嵌容器"></a>演示1 - Tomcat 内嵌容器</h4><h5 id="关键代码-8"><a href="#关键代码-8" class="headerlink" title="关键代码"></a>关键代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> LifecycleException, IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建 Tomcat 对象</span></span><br><span class="line">    <span class="type">Tomcat</span> <span class="variable">tomcat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tomcat</span>();</span><br><span class="line">    tomcat.setBaseDir(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.创建项目文件夹, 即 docBase 文件夹</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">docBase</span> <span class="operator">=</span> Files.createTempDirectory(<span class="string">&quot;boot.&quot;</span>).toFile();</span><br><span class="line">    docBase.deleteOnExit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.创建 Tomcat 项目, 在 Tomcat 中称为 Context</span></span><br><span class="line">    <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> tomcat.addContext(<span class="string">&quot;&quot;</span>, docBase.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.编程添加 Servlet</span></span><br><span class="line">    context.addServletContainerInitializer(<span class="keyword">new</span> <span class="title class_">ServletContainerInitializer</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; c, ServletContext ctx)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">            <span class="type">HelloServlet</span> <span class="variable">helloServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloServlet</span>();</span><br><span class="line">            ctx.addServlet(<span class="string">&quot;aaa&quot;</span>, helloServlet).addMapping(<span class="string">&quot;/hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, Collections.emptySet());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.启动 Tomcat</span></span><br><span class="line">    tomcat.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.创建连接器, 设置监听端口</span></span><br><span class="line">    <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Connector</span>(<span class="keyword">new</span> <span class="title class_">Http11Nio2Protocol</span>());</span><br><span class="line">    connector.setPort(<span class="number">8080</span>);</span><br><span class="line">    tomcat.setConnector(connector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="演示2-集成-Spring-容器"><a href="#演示2-集成-Spring-容器" class="headerlink" title="演示2 - 集成 Spring 容器"></a>演示2 - 集成 Spring 容器</h4><h5 id="关键代码-9"><a href="#关键代码-9" class="headerlink" title="关键代码"></a>关键代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">springContext</span> <span class="operator">=</span> getApplicationContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.编程添加 Servlet</span></span><br><span class="line">context.addServletContainerInitializer(<span class="keyword">new</span> <span class="title class_">ServletContainerInitializer</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; c, ServletContext ctx)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// ⬇️通过 ServletRegistrationBean 添加 DispatcherServlet 等</span></span><br><span class="line">        <span class="keyword">for</span> (ServletRegistrationBean registrationBean : </span><br><span class="line">             springContext.getBeansOfType(ServletRegistrationBean.class).values()) &#123;</span><br><span class="line">            registrationBean.onStartup(ctx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, Collections.emptySet());</span><br></pre></td></tr></table></figure>
<h3 id="41-Boot-自动配置"><a href="#41-Boot-自动配置" class="headerlink" title="41) Boot 自动配置"></a>41) Boot 自动配置</h3><h4 id="AopAutoConfiguration"><a href="#AopAutoConfiguration" class="headerlink" title="AopAutoConfiguration"></a>AopAutoConfiguration</h4><p>Spring Boot 是利用了自动配置类来简化了 aop 相关配置</p>
<ul>
<li>AOP 自动配置类为 <code>org.springframework.boot.autoconfigure.aop.AopAutoConfiguration</code></li>
<li>可以通过 <code>spring.aop.auto=false</code> 禁用 aop 自动配置</li>
<li>AOP 自动配置的本质是通过 <code>@EnableAspectJAutoProxy</code> 来开启了自动代理，如果在引导类上自己添加了 <code>@EnableAspectJAutoProxy</code> 那么以自己添加的为准</li>
<li><code>@EnableAspectJAutoProxy</code> 的本质是向容器中添加了 <code>AnnotationAwareAspectJAutoProxyCreator</code> 这个 bean 后处理器，它能够找到容器中所有切面，并为匹配切点的目标类创建代理，创建代理的工作一般是在 bean 的初始化阶段完成的</li>
</ul>
<h4 id="DataSourceAutoConfiguration"><a href="#DataSourceAutoConfiguration" class="headerlink" title="DataSourceAutoConfiguration"></a>DataSourceAutoConfiguration</h4><ul>
<li>对应的自动配置类为：org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</li>
<li>它内部采用了条件装配，通过检查容器的 bean，以及类路径下的 class，来决定该 @Bean 是否生效</li>
</ul>
<p>简单说明一下，Spring Boot 支持两大类数据源：</p>
<ul>
<li>EmbeddedDatabase - 内嵌数据库连接池</li>
<li>PooledDataSource - 非内嵌数据库连接池</li>
</ul>
<p>PooledDataSource 又支持如下数据源</p>
<ul>
<li>hikari 提供的 HikariDataSource</li>
<li>tomcat-jdbc 提供的 DataSource</li>
<li>dbcp2 提供的 BasicDataSource</li>
<li>oracle 提供的 PoolDataSourceImpl</li>
</ul>
<p>如果知道数据源的实现类类型，即指定了 <code>spring.datasource.type</code>，理论上可以支持所有数据源，但这样做的一个最大问题是无法订制每种数据源的详细配置（如最大、最小连接数等）</p>
<h4 id="MybatisAutoConfiguration"><a href="#MybatisAutoConfiguration" class="headerlink" title="MybatisAutoConfiguration"></a>MybatisAutoConfiguration</h4><ul>
<li>MyBatis 自动配置类为 <code>org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</code></li>
<li>它主要配置了两个 bean<ul>
<li>SqlSessionFactory - MyBatis 核心对象，用来创建 SqlSession</li>
<li>SqlSessionTemplate - SqlSession 的实现，此实现会与当前线程绑定</li>
<li>用 ImportBeanDefinitionRegistrar 的方式扫描所有标注了 @Mapper 注解的接口</li>
<li>用 AutoConfigurationPackages 来确定扫描的包</li>
</ul>
</li>
<li>还有一个相关的 bean：MybatisProperties，它会读取配置文件中带 <code>mybatis.</code> 前缀的配置项进行定制配置</li>
</ul>
<p>@MapperScan 注解的作用与 MybatisAutoConfiguration 类似，会注册 MapperScannerConfigurer 有如下区别</p>
<ul>
<li>@MapperScan 扫描具体包（当然也可以配置关注哪个注解）</li>
<li>@MapperScan 如果不指定扫描具体包，则会把引导类范围内，所有接口当做 Mapper 接口</li>
<li>MybatisAutoConfiguration 关注的是所有标注 @Mapper 注解的接口，会忽略掉非 @Mapper 标注的接口</li>
</ul>
<p>这里有同学有疑问，之前介绍的都是将具体类交给 Spring 管理，怎么到了 MyBatis 这儿，接口就可以被管理呢？</p>
<ul>
<li>其实并非将接口交给 Spring 管理，而是每个接口会对应一个 MapperFactoryBean，是后者被 Spring 所管理，接口只是作为 MapperFactoryBean 的一个属性来配置</li>
</ul>
<h4 id="TransactionAutoConfiguration"><a href="#TransactionAutoConfiguration" class="headerlink" title="TransactionAutoConfiguration"></a>TransactionAutoConfiguration</h4><ul>
<li><p>事务自动配置类有两个：</p>
<ul>
<li><code>org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration</code></li>
<li><code>org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration</code></li>
</ul>
</li>
<li><p>前者配置了 DataSourceTransactionManager 用来执行事务的提交、回滚操作</p>
</li>
<li>后者功能上对标 @EnableTransactionManagement，包含以下三个 bean<ul>
<li>BeanFactoryTransactionAttributeSourceAdvisor 事务切面类，包含通知和切点</li>
<li>TransactionInterceptor 事务通知类，由它在目标方法调用前后加入事务操作</li>
<li>AnnotationTransactionAttributeSource 会解析 @Transactional 及事务属性，也包含了切点功能</li>
</ul>
</li>
<li>如果自己配置了 DataSourceTransactionManager 或是在引导类加了 @EnableTransactionManagement，则以自己配置的为准</li>
</ul>
<h4 id="ServletWebServerFactoryAutoConfiguration"><a href="#ServletWebServerFactoryAutoConfiguration" class="headerlink" title="ServletWebServerFactoryAutoConfiguration"></a>ServletWebServerFactoryAutoConfiguration</h4><ul>
<li>提供 ServletWebServerFactory</li>
</ul>
<h4 id="DispatcherServletAutoConfiguration"><a href="#DispatcherServletAutoConfiguration" class="headerlink" title="DispatcherServletAutoConfiguration"></a>DispatcherServletAutoConfiguration</h4><ul>
<li>提供 DispatcherServlet</li>
<li>提供 DispatcherServletRegistrationBean</li>
</ul>
<h4 id="WebMvcAutoConfiguration"><a href="#WebMvcAutoConfiguration" class="headerlink" title="WebMvcAutoConfiguration"></a>WebMvcAutoConfiguration</h4><ul>
<li>配置 DispatcherServlet 的各项组件，提供的 bean 见过的有<ul>
<li>多项 HandlerMapping</li>
<li>多项 HandlerAdapter</li>
<li>HandlerExceptionResolver</li>
</ul>
</li>
</ul>
<h4 id="ErrorMvcAutoConfiguration"><a href="#ErrorMvcAutoConfiguration" class="headerlink" title="ErrorMvcAutoConfiguration"></a>ErrorMvcAutoConfiguration</h4><ul>
<li>提供的 bean 有 BasicErrorController</li>
</ul>
<h4 id="MultipartAutoConfiguration"><a href="#MultipartAutoConfiguration" class="headerlink" title="MultipartAutoConfiguration"></a>MultipartAutoConfiguration</h4><ul>
<li>它提供了 org.springframework.web.multipart.support.StandardServletMultipartResolver</li>
<li>该 bean 用来解析 multipart/form-data 格式的数据</li>
</ul>
<h4 id="HttpEncodingAutoConfiguration"><a href="#HttpEncodingAutoConfiguration" class="headerlink" title="HttpEncodingAutoConfiguration"></a>HttpEncodingAutoConfiguration</h4><ul>
<li>POST 请求参数如果有中文，无需特殊设置，这是因为 Spring Boot 已经配置了 org.springframework.boot.web.servlet.filter.OrderedCharacterEncodingFilter</li>
<li>对应配置 server.servlet.encoding.charset=UTF-8，默认就是 UTF-8</li>
<li>当然，它只影响非 json 格式的数据</li>
</ul>
<h4 id="演示-自动配置类原理"><a href="#演示-自动配置类原理" class="headerlink" title="演示 - 自动配置类原理"></a>演示 - 自动配置类原理</h4><h5 id="关键代码-10"><a href="#关键代码-10" class="headerlink" title="关键代码"></a>关键代码</h5><p>假设已有第三方的两个自动配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// ⬅️第三方的配置类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfiguration1</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// ⬅️第三方的配置类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfiguration2</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提供一个配置文件 META-INF/spring.factories，key 为导入器类名，值为多个自动配置类名，用逗号分隔</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">MyImportSelector</span>=<span class="string">\</span></span><br><span class="line"><span class="string">AutoConfiguration1,\</span></span><br><span class="line"><span class="string">AutoConfiguration2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong><em>注意</em></strong></p>
<ul>
<li>上述配置文件中 MyImportSelector 与 AutoConfiguration1，AutoConfiguration2 为简洁均省略了包名，自己测试时请将包名根据情况补全</li>
</ul>
</blockquote>
<p>引入自动配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// ⬅️本项目的配置类</span></span><br><span class="line"><span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span> &#123;</span><br><span class="line">    <span class="comment">// ⬇️该方法从 META-INF/spring.factories 读取自动配置类名，返回的 String[] 即为要导入的配置类</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> SpringFactoriesLoader</span><br><span class="line">            .loadFactoryNames(MyImportSelector.class, <span class="literal">null</span>).toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="收获💡-53"><a href="#收获💡-53" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>自动配置类本质上就是一个配置类而已，只是用 META-INF/spring.factories 管理，与应用配置类解耦</li>
<li>@Enable 打头的注解本质是利用了 @Import</li>
<li>@Import 配合 DeferredImportSelector 即可实现导入，selectImports 方法的返回值即为要导入的配置类名</li>
<li>DeferredImportSelector 的导入会在最后执行，为的是让其它配置优先解析</li>
</ol>
<h3 id="42-条件装配底层"><a href="#42-条件装配底层" class="headerlink" title="42) 条件装配底层"></a>42) 条件装配底层</h3><p>条件装配的底层是本质上是 @Conditional 与 Condition，这两个注解。引入自动配置类时，期望满足一定条件才能被 Spring 管理，不满足则不管理，怎么做呢？</p>
<p>比如条件是【类路径下必须有 dataSource】这个 bean ，怎么做呢？</p>
<p>首先编写条件判断类，它实现 Condition 接口，编写条件判断逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyCondition1</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123; </span><br><span class="line">    <span class="comment">// ⬇️如果存在 Druid 依赖，条件成立</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ClassUtils.isPresent(<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其次，在要导入的自动配置类上添加 <code>@Conditional(MyCondition1.class)</code>，将来此类被导入时就会做条件检查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 第三方的配置类</span></span><br><span class="line"><span class="meta">@Conditional(MyCondition1.class)</span> <span class="comment">// ⬅️加入条件</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfiguration1</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分别测试加入和去除 druid 依赖，观察 bean1 是否存在于容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="收获💡-54"><a href="#收获💡-54" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>学习一种特殊的 if - else</li>
</ol>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="43-FactoryBean"><a href="#43-FactoryBean" class="headerlink" title="43) FactoryBean"></a>43) FactoryBean</h3><h4 id="演示-FactoryBean"><a href="#演示-FactoryBean" class="headerlink" title="演示 - FactoryBean"></a>演示 - FactoryBean</h4><h5 id="代码参考-40"><a href="#代码参考-40" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a43</strong> 包</p>
<h4 id="收获💡-55"><a href="#收获💡-55" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>它的作用是用制造创建过程较为复杂的产品, 如 SqlSessionFactory, 但 @Bean 已具备等价功能</li>
<li>使用上较为古怪, 一不留神就会用错<ol>
<li>被 FactoryBean 创建的产品<ul>
<li>会认为创建、依赖注入、Aware 接口回调、前初始化这些都是 FactoryBean 的职责, 这些流程都不会走</li>
<li>唯有后初始化的流程会走, 也就是产品可以被代理增强</li>
<li>单例的产品不会存储于 BeanFactory 的 singletonObjects 成员中, 而是另一个 factoryBeanObjectCache 成员中</li>
</ul>
</li>
<li>按名字去获取时, 拿到的是产品对象, 名字前面加 &amp; 获取的是工厂对象</li>
</ol>
</li>
</ol>
<h3 id="44-Indexed-原理"><a href="#44-Indexed-原理" class="headerlink" title="44) @Indexed 原理"></a>44) @Indexed 原理</h3><p>真实项目中，只需要加入以下依赖即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-indexer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="演示-Indexed"><a href="#演示-Indexed" class="headerlink" title="演示 - @Indexed"></a>演示 - @Indexed</h4><h5 id="代码参考-41"><a href="#代码参考-41" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a44</strong> 包</p>
<h4 id="收获💡-56"><a href="#收获💡-56" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>在编译时就根据 @Indexed 生成 META-INF/spring.components 文件</li>
<li>扫描时<ul>
<li>如果发现 META-INF/spring.components 存在, 以它为准加载 bean definition</li>
<li>否则, 会遍历包下所有 class 资源 (包括 jar 内的)</li>
</ul>
</li>
<li>解决的问题，在编译期就找到 @Component 组件，节省运行期间扫描 @Component 的时间</li>
</ol>
<h3 id="45-代理进一步理解"><a href="#45-代理进一步理解" class="headerlink" title="45) 代理进一步理解"></a>45) 代理进一步理解</h3><h4 id="演示-代理"><a href="#演示-代理" class="headerlink" title="演示 - 代理"></a>演示 - 代理</h4><h5 id="代码参考-42"><a href="#代码参考-42" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a45</strong> 包</p>
<h4 id="收获💡-57"><a href="#收获💡-57" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li><p>spring 代理的设计特点</p>
<ul>
<li><p>依赖注入和初始化影响的是原始对象</p>
<ul>
<li>因此 cglib 不能用 MethodProxy.invokeSuper()</li>
</ul>
</li>
<li><p>代理与目标是两个对象，二者成员变量并不共用数据</p>
</li>
</ul>
</li>
<li><p>static 方法、final 方法、private 方法均无法增强</p>
<ul>
<li>进一步理解代理增强基于方法重写</li>
</ul>
</li>
</ol>
<h3 id="46-Value-装配底层"><a href="#46-Value-装配底层" class="headerlink" title="46) @Value 装配底层"></a>46) @Value 装配底层</h3><h4 id="按类型装配的步骤"><a href="#按类型装配的步骤" class="headerlink" title="按类型装配的步骤"></a>按类型装配的步骤</h4><ol>
<li>查看需要的类型是否为 Optional，是，则进行封装（非延迟），否则向下走</li>
<li>查看需要的类型是否为 ObjectFactory 或 ObjectProvider，是，则进行封装（延迟），否则向下走</li>
<li>查看需要的类型（成员或参数）上是否用 @Lazy 修饰，是，则返回代理，否则向下走</li>
<li>解析 @Value 的值<ol>
<li>如果需要的值是字符串，先解析 ${ }，再解析 #{ }</li>
<li>不是字符串，需要用 TypeConverter 转换</li>
</ol>
</li>
<li>看需要的类型是否为 Stream、Array、Collection、Map，是，则按集合处理，否则向下走</li>
<li>在 BeanFactory 的 resolvableDependencies 中找有没有类型合适的对象注入，没有向下走</li>
<li>在 BeanFactory 及父工厂中找类型匹配的 bean 进行筛选，筛选时会考虑 @Qualifier 及泛型</li>
<li>结果个数为 0 抛出 NoSuchBeanDefinitionException 异常 </li>
<li>如果结果 &gt; 1，再根据 @Primary 进行筛选</li>
<li>如果结果仍 &gt; 1，再根据成员名或变量名进行筛选</li>
<li>结果仍 &gt; 1，抛出 NoUniqueBeanDefinitionException 异常</li>
</ol>
<h4 id="演示-Value-装配过程"><a href="#演示-Value-装配过程" class="headerlink" title="演示 - @Value 装配过程"></a>演示 - @Value 装配过程</h4><h5 id="代码参考-43"><a href="#代码参考-43" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a46</strong> 包</p>
<h4 id="收获💡-58"><a href="#收获💡-58" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>ContextAnnotationAutowireCandidateResolver 作用之一，获取 @Value 的值</li>
<li>了解 ${ } 对应的解析器</li>
<li>了解 #{ } 对应的解析器</li>
<li>TypeConvert 的一项体现</li>
</ol>
<h3 id="47-Autowired-装配底层"><a href="#47-Autowired-装配底层" class="headerlink" title="47) @Autowired 装配底层"></a>47) @Autowired 装配底层</h3><h4 id="演示-Autowired-装配过程"><a href="#演示-Autowired-装配过程" class="headerlink" title="演示 - @Autowired 装配过程"></a>演示 - @Autowired 装配过程</h4><h5 id="代码参考-44"><a href="#代码参考-44" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a47</strong> 包</p>
<h4 id="收获💡-59"><a href="#收获💡-59" class="headerlink" title="收获💡"></a>收获💡</h4><ol>
<li>@Autowired 本质上是根据成员变量或方法参数的类型进行装配</li>
<li>如果待装配类型是 Optional，需要根据 Optional 泛型找到 bean，再封装为 Optional 对象装配</li>
<li>如果待装配的类型是 ObjectFactory，需要根据 ObjectFactory 泛型创建 ObjectFactory 对象装配<ul>
<li>此方法可以延迟 bean 的获取</li>
</ul>
</li>
<li>如果待装配的成员变量或方法参数上用 @Lazy 标注，会创建代理对象装配<ul>
<li>此方法可以延迟真实 bean 的获取</li>
<li>被装配的代理不作为 bean</li>
</ul>
</li>
<li>如果待装配类型是数组，需要获取数组元素类型，根据此类型找到多个 bean 进行装配</li>
<li>如果待装配类型是 Collection 或其子接口，需要获取 Collection 泛型，根据此类型找到多个 bean</li>
<li>如果待装配类型是 ApplicationContext 等特殊类型<ul>
<li>会在 BeanFactory 的 resolvableDependencies 成员按类型查找装配</li>
<li>resolvableDependencies 是 map 集合，key 是特殊类型，value 是其对应对象</li>
<li>不能直接根据 key 进行查找，而是用 isAssignableFrom 逐一尝试右边类型是否可以被赋值给左边的 key 类型</li>
</ul>
</li>
<li>如果待装配类型有泛型参数<ul>
<li>需要利用 ContextAnnotationAutowireCandidateResolver 按泛型参数类型筛选</li>
</ul>
</li>
<li>如果待装配类型有 @Qualifier<ul>
<li>需要利用 ContextAnnotationAutowireCandidateResolver 按注解提供的 bean 名称筛选</li>
</ul>
</li>
<li>有 @Primary 标注的 @Component 或 @Bean 的处理</li>
<li>与成员变量名或方法参数名同名 bean 的处理</li>
</ol>
<h3 id="48-事件监听器"><a href="#48-事件监听器" class="headerlink" title="48) 事件监听器"></a>48) 事件监听器</h3><h4 id="演示-事件监听器"><a href="#演示-事件监听器" class="headerlink" title="演示 - 事件监听器"></a>演示 - 事件监听器</h4><h5 id="代码参考-45"><a href="#代码参考-45" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a48</strong> 包</p>
<h4 id="收获💡-60"><a href="#收获💡-60" class="headerlink" title="收获💡"></a>收获💡</h4><p>事件监听器的两种方式</p>
<ol>
<li>实现 ApplicationListener 接口<ul>
<li>根据接口泛型确定事件类型</li>
</ul>
</li>
<li>@EventListener 标注监听方法<ul>
<li>根据监听器方法参数确定事件类型</li>
<li>解析时机：在 SmartInitializingSingleton（所有单例初始化完成后），解析每个单例 bean</li>
</ul>
</li>
</ol>
<h3 id="49-事件发布器"><a href="#49-事件发布器" class="headerlink" title="49) 事件发布器"></a>49) 事件发布器</h3><h4 id="演示-事件发布器"><a href="#演示-事件发布器" class="headerlink" title="演示 - 事件发布器"></a>演示 - 事件发布器</h4><h5 id="代码参考-46"><a href="#代码参考-46" class="headerlink" title="代码参考"></a>代码参考</h5><p><strong>com.itheima.a49</strong> 包</p>
<h4 id="收获💡-61"><a href="#收获💡-61" class="headerlink" title="收获💡"></a>收获💡</h4><p>事件发布器模拟实现</p>
<ol>
<li>addApplicationListenerBean 负责收集容器中的监听器<ul>
<li>监听器会统一转换为 GenericApplicationListener 对象，以支持判断事件类型</li>
</ul>
</li>
<li>multicastEvent 遍历监听器集合，发布事件<ul>
<li>发布前先通过 GenericApplicationListener.supportsEventType 判断支持该事件类型才发事件</li>
<li>可以利用线程池进行异步发事件优化</li>
</ul>
</li>
<li>如果发送的事件对象不是 ApplicationEvent 类型，Spring 会把它包装为 PayloadApplicationEvent 并用泛型技术解析事件对象的原始类型<ul>
<li>视频中未讲解</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>面试总结</tag>
      </tags>
  </entry>
</search>
